// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/unstable/xwayland-keyboard-grab/xwayland-keyboard-grab-unstable-v1.xml
//
// xwayland_keyboard_grab_unstable_v1 Protocol Copyright:
///
/// Copyright Â© 2017 Red Hat Inc.
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/protocols/wayland.dart';
import 'dart:typed_data';
// AWOO-MIXINS

/// context object for keyboard grab manager
///
/// A global interface used for grabbing the keyboard.
///
class ZwpXwaylandKeyboardGrabManagerV1 extends Proxy {
  final Context innerContext;
  final version = 1;

  ZwpXwaylandKeyboardGrabManagerV1(this.innerContext)
      : super(innerContext.allocateClientId()) {
    innerContext.register(this);
  }

  @override
  toString() {
    return "ZwpXwaylandKeyboardGrabManagerV1 {name: 'zwp_xwayland_keyboard_grab_manager_v1', id: '$objectId', version: '1',}";
  }

  /// destroy the keyboard grab manager
  ///
  /// Destroy the keyboard grab manager.
  ///
  Result<void, Object> destroy() {
    innerContext.unRegister(this);
    logLn("ZwpXwaylandKeyboardGrabManagerV1::destroy ");
    var arguments = [];
    var argTypes = <WaylandType>[];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 0])
            .buffer
            .asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in ZwpXwaylandKeyboardGrabManagerV1::destroy: $e");
      return Failure(e);
    }
    return Success(Object());
  }

  /// grab the keyboard to a surface
  ///
  /// The grab_keyboard request asks for a grab of the keyboard, forcing
  /// the keyboard focus for the given seat upon the given surface.
  ///
  /// The protocol provides no guarantee that the grab is ever satisfied,
  /// and does not require the compositor to send an error if the grab
  /// cannot ever be satisfied. It is thus possible to request a keyboard
  /// grab that will never be effective.
  ///
  /// The protocol:
  ///
  /// * does not guarantee that the grab itself is applied for a surface,
  /// the grab request may be silently ignored by the compositor,
  /// * does not guarantee that any events are sent to this client even
  /// if the grab is applied to a surface,
  /// * does not guarantee that events sent to this client are exhaustive,
  /// a compositor may filter some events for its own consumption,
  /// * does not guarantee that events sent to this client are continuous,
  /// a compositor may change and reroute keyboard events while the grab
  /// is nominally active.
  ///
  /// [id]:
  /// [surface]: surface to report keyboard events to
  /// [seat]: the seat for which the keyboard should be grabbed
  Result<ZwpXwaylandKeyboardGrabV1, Object> grabKeyboard(
      Surface surface, Seat seat) {
    var id = ZwpXwaylandKeyboardGrabV1(innerContext);
    logLn(
        "ZwpXwaylandKeyboardGrabManagerV1::grabKeyboard  id: $id surface: $surface seat: $seat");
    var arguments = [id, surface, seat];
    var argTypes = <WaylandType>[
      WaylandType.newId,
      WaylandType.object,
      WaylandType.object
    ];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 1])
            .buffer
            .asUint8List());
    bytesBuilder.add(Uint32List.fromList([id.objectId]).buffer.asUint8List());
    bytesBuilder
        .add(Uint32List.fromList([surface.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([seat.objectId]).buffer.asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in ZwpXwaylandKeyboardGrabManagerV1::grabKeyboard: $e");
      return Failure(e);
    }
    return Success(id);
  }
}

/// interface for grabbing the keyboard
///
/// A global interface used for grabbing the keyboard.
///
class ZwpXwaylandKeyboardGrabV1 extends Proxy {
  final Context innerContext;
  final version = 1;

  ZwpXwaylandKeyboardGrabV1(this.innerContext)
      : super(innerContext.allocateClientId()) {
    innerContext.register(this);
  }

  @override
  toString() {
    return "ZwpXwaylandKeyboardGrabV1 {name: 'zwp_xwayland_keyboard_grab_v1', id: '$objectId', version: '1',}";
  }

  /// destroy the grabbed keyboard object
  ///
  /// Destroy the grabbed keyboard object. If applicable, the compositor
  /// will ungrab the keyboard.
  ///
  Result<void, Object> destroy() {
    innerContext.unRegister(this);
    logLn("ZwpXwaylandKeyboardGrabV1::destroy ");
    var arguments = [];
    var argTypes = <WaylandType>[];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 0])
            .buffer
            .asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in ZwpXwaylandKeyboardGrabV1::destroy: $e");
      return Failure(e);
    }
    return Success(Object());
  }
}
