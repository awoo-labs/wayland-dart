// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/unstable/xdg-shell/xdg-shell-unstable-v5.xml
//
// xdg_shell_unstable_v5 Protocol Copyright: 
/// 
/// Copyright © 2008-2013 Kristian Høgsberg
/// Copyright © 2013      Rafael Antognolli
/// Copyright © 2013      Jasper St. Pierre
/// Copyright © 2010-2013 Intel Corporation
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/protocols/wayland.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:typed_data';
import 'package:result_dart/result_dart.dart';

/// check if the client is alive
/// 
/// The ping event asks the client if it's still alive. Pass the
/// serial specified in the event back to the compositor by sending
/// a "pong" request back with the specified serial.
/// 
/// Compositors can use this to determine if the client is still
/// alive. It's unspecified what will happen if the client doesn't
/// respond to the ping request, or in what timeframe. Clients should
/// try to respond in a reasonable amount of time.
/// 
/// A compositor is free to ping in any way it wants, but a client must
/// always respond to any xdg_shell object it created.
/// 
class XdgShellPingEvent {
/// pass this to the pong request
  final int serial;

  XdgShellPingEvent(
this.serial,

);

@override
toString(){
return "XdgShellPingEvent (serial: $serial)";
}
}

typedef XdgShellPingEventHandler = void Function(XdgShellPingEvent);


/// create desktop-style surfaces
/// 
/// xdg_shell allows clients to turn a wl_surface into a "real window"
/// which can be dragged, resized, stacked, and moved around by the
/// user. Everything about this interface is suited towards traditional
/// desktop environments.
/// 
class XdgShell extends Proxy implements Dispatcher{
  final Context innerContext;
  final version = 1;

  XdgShell(this.innerContext) : super(innerContext.allocateClientId()){
    innerContext.register(this);
  }


@override
toString(){
return "XdgShell {name: 'xdg_shell', id: '$objectId', version: '1',}";
}

/// destroy xdg_shell
/// 
/// Destroy this xdg_shell object.
/// 
/// Destroying a bound xdg_shell object while there are surfaces
/// still alive created by this xdg_shell object instance is illegal
/// and will result in a protocol error.
/// 
  Result<void,Object> destroy() {
innerContext.unRegister(this);
    logLn("XdgShell::destroy ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 0]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgShell::destroy: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// enable use of this unstable version
/// 
/// Negotiate the unstable version of the interface.  This
/// mechanism is in place to ensure client and server agree on the
/// unstable versions of the protocol that they speak or exit
/// cleanly if they don't agree.  This request will go away once
/// the xdg-shell protocol is stable.
/// 
/// [version]:
  Result<void,Object> useUnstableVersion(int version) {
    logLn("XdgShell::useUnstableVersion  version: $version");
var arguments = [version];var argTypes = <WaylandType>[WaylandType.int];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 1]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([version]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgShell::useUnstableVersion: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// create a shell surface from a surface
/// 
/// This creates an xdg_surface for the given surface and gives it the
/// xdg_surface role. A wl_surface can only be given an xdg_surface role
/// once. If get_xdg_surface is called with a wl_surface that already has
/// an active xdg_surface associated with it, or if it had any other role,
/// an error is raised.
/// 
/// See the documentation of xdg_surface for more details about what an
/// xdg_surface is and how it is used.
/// 
/// [id]:
/// [surface]:
  Result<XdgSurface,Object> getXdgSurface(Surface surface) {
  var id =  XdgSurface(innerContext);
    logLn("XdgShell::getXdgSurface  id: $id surface: $surface");
var arguments = [id, surface];var argTypes = <WaylandType>[WaylandType.newId, WaylandType.object];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 2]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([id.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([surface.objectId]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgShell::getXdgSurface: $e");
   return Failure(e);
    }
    return Success(id);
  }

/// create a popup for a surface
/// 
/// This creates an xdg_popup for the given surface and gives it the
/// xdg_popup role. A wl_surface can only be given an xdg_popup role
/// once. If get_xdg_popup is called with a wl_surface that already has
/// an active xdg_popup associated with it, or if it had any other role,
/// an error is raised.
/// 
/// This request must be used in response to some sort of user action
/// like a button press, key press, or touch down event.
/// 
/// See the documentation of xdg_popup for more details about what an
/// xdg_popup is and how it is used.
/// 
/// [id]:
/// [surface]:
/// [parent]:
/// [seat]: the wl_seat of the user event
/// [serial]: the serial of the user event
/// [x]:
/// [y]:
  Result<XdgPopup,Object> getXdgPopup(Surface surface, Surface parent, Seat seat, int serial, int x, int y) {
  var id =  XdgPopup(innerContext);
    logLn("XdgShell::getXdgPopup  id: $id surface: $surface parent: $parent seat: $seat serial: $serial x: $x y: $y");
var arguments = [id, surface, parent, seat, serial, x, y];var argTypes = <WaylandType>[WaylandType.newId, WaylandType.object, WaylandType.object, WaylandType.object, WaylandType.uint, WaylandType.int, WaylandType.int];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 3]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([id.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([surface.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([parent.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([seat.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([serial]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([x]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([y]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgShell::getXdgPopup: $e");
   return Failure(e);
    }
    return Success(id);
  }

/// respond to a ping event
/// 
/// A client must respond to a ping event with a pong request or
/// the client may be deemed unresponsive.
/// 
/// [serial]: serial of the ping event
  Result<void,Object> pong(int serial) {
    logLn("XdgShell::pong  serial: $serial");
var arguments = [serial];var argTypes = <WaylandType>[WaylandType.uint];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 4]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([serial]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgShell::pong: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// check if the client is alive
/// 
/// The ping event asks the client if it's still alive. Pass the
/// serial specified in the event back to the compositor by sending
/// a "pong" request back with the specified serial.
/// 
/// Compositors can use this to determine if the client is still
/// alive. It's unspecified what will happen if the client doesn't
/// respond to the ping request, or in what timeframe. Clients should
/// try to respond in a reasonable amount of time.
/// 
/// A compositor is free to ping in any way it wants, but a client must
/// always respond to any xdg_shell object it created.
/// 
/// Event handler for Ping
/// - [serial]: pass this to the pong request
 void onPing(XdgShellPingEventHandler handler) {
   _pingHandler = handler;
 }

 XdgShellPingEventHandler? _pingHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
logLn("XdgShell.dispatch($opcode, $fd, $data)");
   switch (opcode) {     case 0:

       if (_pingHandler != null) {
var offset = 0;
final serial = ByteData.view(data.buffer).getUint32(offset, Endian.little);
offset += 4;
var event = XdgShellPingEvent(
serial,
        );
         _pingHandler!(event);
       }
       break;
   }
 }
}

/// latest protocol version
/// 
/// The 'current' member of this enum gives the version of the
/// protocol.  Implementations can compare this to the version
/// they implement using static_assert to ensure the protocol and
/// implementation versions match.
/// 

enum XdgShellVersion {
/// Always the latest version
  current("current", 5);
const XdgShellVersion(this.enumName, this.enumValue);
final int enumValue;
final String enumName;
@override
toString(){
return "XdgShellVersion {name: $enumName, value: $enumValue}";
}
}

/// 
/// 

enum XdgShellError {
/// given wl_surface has another role
  role("role", 0),/// xdg_shell was destroyed before children
  defunctSurfaces("defunct_surfaces", 1),/// the client tried to map or destroy a non-topmost popup
  notTheTopmostPopup("not_the_topmost_popup", 2),/// the client specified an invalid popup parent surface
  invalidPopupParent("invalid_popup_parent", 3);
const XdgShellError(this.enumName, this.enumValue);
final int enumValue;
final String enumName;
@override
toString(){
return "XdgShellError {name: $enumName, value: $enumValue}";
}
}


/// suggest a surface change
/// 
/// The configure event asks the client to resize its surface or to
/// change its state.
/// 
/// The width and height arguments specify a hint to the window
/// about how its surface should be resized in window geometry
/// coordinates. See set_window_geometry.
/// 
/// If the width or height arguments are zero, it means the client
/// should decide its own window dimension. This may happen when the
/// compositor need to configure the state of the surface but doesn't
/// have any information about any previous or expected dimension.
/// 
/// The states listed in the event specify how the width/height
/// arguments should be interpreted, and possibly how it should be
/// drawn.
/// 
/// Clients should arrange their surface for the new size and
/// states, and then send a ack_configure request with the serial
/// sent in this configure event at some point before committing
/// the new surface.
/// 
/// If the client receives multiple configure events before it
/// can respond to one, it is free to discard all but the last
/// event it received.
/// 
class XdgSurfaceConfigureEvent {
/// 
  final int width;

/// 
  final int height;

/// 
  final List<int> states;

/// 
  final int serial;

  XdgSurfaceConfigureEvent(
this.width,

this.height,

this.states,

this.serial,

);

@override
toString(){
return "XdgSurfaceConfigureEvent (width: $width, height: $height, states: $states, serial: $serial)";
}
}

typedef XdgSurfaceConfigureEventHandler = void Function(XdgSurfaceConfigureEvent);

/// surface wants to be closed
/// 
/// The close event is sent by the compositor when the user
/// wants the surface to be closed. This should be equivalent to
/// the user clicking the close button in client-side decorations,
/// if your application has any...
/// 
/// This is only a request that the user intends to close your
/// window. The client may choose to ignore this request, or show
/// a dialog to ask the user to save their data...
/// 
class XdgSurfaceCloseEvent {
  XdgSurfaceCloseEvent(
);

@override
toString(){
return "XdgSurfaceCloseEvent ()";
}
}

typedef XdgSurfaceCloseEventHandler = void Function(XdgSurfaceCloseEvent);


/// A desktop window
/// 
/// An interface that may be implemented by a wl_surface, for
/// implementations that provide a desktop-style user interface.
/// 
/// It provides requests to treat surfaces like windows, allowing to set
/// properties like maximized, fullscreen, minimized, and to move and resize
/// them, and associate metadata like title and app id.
/// 
/// The client must call wl_surface.commit on the corresponding wl_surface
/// for the xdg_surface state to take effect. Prior to committing the new
/// state, it can set up initial configuration, such as maximizing or setting
/// a window geometry.
/// 
/// Even without attaching a buffer the compositor must respond to initial
/// committed configuration, for instance sending a configure event with
/// expected window geometry if the client maximized its surface during
/// initialization.
/// 
/// For a surface to be mapped by the compositor the client must have
/// committed both an xdg_surface state and a buffer.
/// 
class XdgSurface extends Proxy implements Dispatcher{
  final Context innerContext;
  final version = 1;

  XdgSurface(this.innerContext) : super(innerContext.allocateClientId()){
    innerContext.register(this);
  }


@override
toString(){
return "XdgSurface {name: 'xdg_surface', id: '$objectId', version: '1',}";
}

/// Destroy the xdg_surface
/// 
/// Unmap and destroy the window. The window will be effectively
/// hidden from the user's point of view, and all state like
/// maximization, fullscreen, and so on, will be lost.
/// 
  Result<void,Object> destroy() {
innerContext.unRegister(this);
    logLn("XdgSurface::destroy ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 0]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::destroy: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// set the parent of this surface
/// 
/// Set the "parent" of this surface. This window should be stacked
/// above a parent. The parent surface must be mapped as long as this
/// surface is mapped.
/// 
/// Parent windows should be set on dialogs, toolboxes, or other
/// "auxiliary" surfaces, so that the parent is raised when the dialog
/// is raised.
/// 
/// [parent]:
  Result<void,Object> setParent(XdgSurface parent) {
    logLn("XdgSurface::setParent  parent: $parent");
var arguments = [parent];var argTypes = <WaylandType>[WaylandType.object];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 1]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([parent.objectId]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setParent: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// set surface title
/// 
/// Set a short title for the surface.
/// 
/// This string may be used to identify the surface in a task bar,
/// window list, or other user interface elements provided by the
/// compositor.
/// 
/// The string must be encoded in UTF-8.
/// 
/// [title]:
  Result<void,Object> setTitle(String title) {
    logLn("XdgSurface::setTitle  title: $title");
var arguments = [title];var argTypes = <WaylandType>[WaylandType.string];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 2]).buffer.asUint8List());
    final titleBytes = utf8.encode(title);
    bytesBuilder.add(Uint32List.fromList([titleBytes.length + 1]).buffer.asUint8List());
    bytesBuilder.add(titleBytes);
    bytesBuilder.add([0]); // Null terminator
    while (bytesBuilder.length % 4 != 0) { bytesBuilder.add([0]); } // Padding
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setTitle: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// set application ID
/// 
/// Set an application identifier for the surface.
/// 
/// The app ID identifies the general class of applications to which
/// the surface belongs. The compositor can use this to group multiple
/// surfaces together, or to determine how to launch a new application.
/// 
/// For D-Bus activatable applications, the app ID is used as the D-Bus
/// service name.
/// 
/// The compositor shell will try to group application surfaces together
/// by their app ID.  As a best practice, it is suggested to select app
/// ID's that match the basename of the application's .desktop file.
/// For example, "org.freedesktop.FooViewer" where the .desktop file is
/// "org.freedesktop.FooViewer.desktop".
/// 
/// See the desktop-entry specification [0] for more details on
/// application identifiers and how they relate to well-known D-Bus
/// names and .desktop files.
/// 
/// [0] http://standards.freedesktop.org/desktop-entry-spec/
/// 
/// [app_id]:
  Result<void,Object> setAppId(String appId) {
    logLn("XdgSurface::setAppId  appId: $appId");
var arguments = [appId];var argTypes = <WaylandType>[WaylandType.string];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 3]).buffer.asUint8List());
    final appIdBytes = utf8.encode(appId);
    bytesBuilder.add(Uint32List.fromList([appIdBytes.length + 1]).buffer.asUint8List());
    bytesBuilder.add(appIdBytes);
    bytesBuilder.add([0]); // Null terminator
    while (bytesBuilder.length % 4 != 0) { bytesBuilder.add([0]); } // Padding
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setAppId: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// show the window menu
/// 
/// Clients implementing client-side decorations might want to show
/// a context menu when right-clicking on the decorations, giving the
/// user a menu that they can use to maximize or minimize the window.
/// 
/// This request asks the compositor to pop up such a window menu at
/// the given position, relative to the local surface coordinates of
/// the parent surface. There are no guarantees as to what menu items
/// the window menu contains.
/// 
/// This request must be used in response to some sort of user action
/// like a button press, key press, or touch down event.
/// 
/// [seat]: the wl_seat of the user event
/// [serial]: the serial of the user event
/// [x]: the x position to pop up the window menu at
/// [y]: the y position to pop up the window menu at
  Result<void,Object> showWindowMenu(Seat seat, int serial, int x, int y) {
    logLn("XdgSurface::showWindowMenu  seat: $seat serial: $serial x: $x y: $y");
var arguments = [seat, serial, x, y];var argTypes = <WaylandType>[WaylandType.object, WaylandType.uint, WaylandType.int, WaylandType.int];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 4]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([seat.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([serial]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([x]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([y]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::showWindowMenu: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// start an interactive move
/// 
/// Start an interactive, user-driven move of the surface.
/// 
/// This request must be used in response to some sort of user action
/// like a button press, key press, or touch down event. The passed
/// serial is used to determine the type of interactive move (touch,
/// pointer, etc).
/// 
/// The server may ignore move requests depending on the state of
/// the surface (e.g. fullscreen or maximized), or if the passed serial
/// is no longer valid.
/// 
/// If triggered, the surface will lose the focus of the device
/// (wl_pointer, wl_touch, etc) used for the move. It is up to the
/// compositor to visually indicate that the move is taking place, such as
/// updating a pointer cursor, during the move. There is no guarantee
/// that the device focus will return when the move is completed.
/// 
/// [seat]: the wl_seat of the user event
/// [serial]: the serial of the user event
  Result<void,Object> move(Seat seat, int serial) {
    logLn("XdgSurface::move  seat: $seat serial: $serial");
var arguments = [seat, serial];var argTypes = <WaylandType>[WaylandType.object, WaylandType.uint];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 5]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([seat.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([serial]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::move: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// start an interactive resize
/// 
/// Start a user-driven, interactive resize of the surface.
/// 
/// This request must be used in response to some sort of user action
/// like a button press, key press, or touch down event. The passed
/// serial is used to determine the type of interactive resize (touch,
/// pointer, etc).
/// 
/// The server may ignore resize requests depending on the state of
/// the surface (e.g. fullscreen or maximized).
/// 
/// If triggered, the client will receive configure events with the
/// "resize" state enum value and the expected sizes. See the "resize"
/// enum value for more details about what is required. The client
/// must also acknowledge configure events using "ack_configure". After
/// the resize is completed, the client will receive another "configure"
/// event without the resize state.
/// 
/// If triggered, the surface also will lose the focus of the device
/// (wl_pointer, wl_touch, etc) used for the resize. It is up to the
/// compositor to visually indicate that the resize is taking place,
/// such as updating a pointer cursor, during the resize. There is no
/// guarantee that the device focus will return when the resize is
/// completed.
/// 
/// The edges parameter specifies how the surface should be resized,
/// and is one of the values of the resize_edge enum. The compositor
/// may use this information to update the surface position for
/// example when dragging the top left corner. The compositor may also
/// use this information to adapt its behavior, e.g. choose an
/// appropriate cursor image.
/// 
/// [seat]: the wl_seat of the user event
/// [serial]: the serial of the user event
/// [edges]: which edge or corner is being dragged
  Result<void,Object> resize(Seat seat, int serial, int edges) {
    logLn("XdgSurface::resize  seat: $seat serial: $serial edges: $edges");
var arguments = [seat, serial, edges];var argTypes = <WaylandType>[WaylandType.object, WaylandType.uint, WaylandType.uint];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 6]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([seat.objectId]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([serial]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([edges]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::resize: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// ack a configure event
/// 
/// When a configure event is received, if a client commits the
/// surface in response to the configure event, then the client
/// must make an ack_configure request sometime before the commit
/// request, passing along the serial of the configure event.
/// 
/// For instance, the compositor might use this information to move
/// a surface to the top left only when the client has drawn itself
/// for the maximized or fullscreen state.
/// 
/// If the client receives multiple configure events before it
/// can respond to one, it only has to ack the last configure event.
/// 
/// A client is not required to commit immediately after sending
/// an ack_configure request - it may even ack_configure several times
/// before its next surface commit.
/// 
/// The compositor expects that the most recently received
/// ack_configure request at the time of a commit indicates which
/// configure event the client is responding to.
/// 
/// [serial]: the serial from the configure event
  Result<void,Object> ackConfigure(int serial) {
    logLn("XdgSurface::ackConfigure  serial: $serial");
var arguments = [serial];var argTypes = <WaylandType>[WaylandType.uint];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 7]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([serial]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::ackConfigure: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// set the new window geometry
/// 
/// The window geometry of a window is its "visible bounds" from the
/// user's perspective. Client-side decorations often have invisible
/// portions like drop-shadows which should be ignored for the
/// purposes of aligning, placing and constraining windows.
/// 
/// The window geometry is double-buffered state, see wl_surface.commit.
/// 
/// Once the window geometry of the surface is set once, it is not
/// possible to unset it, and it will remain the same until
/// set_window_geometry is called again, even if a new subsurface or
/// buffer is attached.
/// 
/// If never set, the value is the full bounds of the surface,
/// including any subsurfaces. This updates dynamically on every
/// commit. This unset mode is meant for extremely simple clients.
/// 
/// If responding to a configure event, the window geometry in here
/// must respect the sizing negotiations specified by the states in
/// the configure event.
/// 
/// The arguments are given in the surface local coordinate space of
/// the wl_surface associated with this xdg_surface.
/// 
/// The width and height must be greater than zero.
/// 
/// [x]:
/// [y]:
/// [width]:
/// [height]:
  Result<void,Object> setWindowGeometry(int x, int y, int width, int height) {
    logLn("XdgSurface::setWindowGeometry  x: $x y: $y width: $width height: $height");
var arguments = [x, y, width, height];var argTypes = <WaylandType>[WaylandType.int, WaylandType.int, WaylandType.int, WaylandType.int];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 8]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([x]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([y]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([width]).buffer.asUint8List());
    bytesBuilder.add(Int32List.fromList([height]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setWindowGeometry: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// maximize the window
/// 
/// Maximize the surface.
/// 
/// After requesting that the surface should be maximized, the compositor
/// will respond by emitting a configure event with the "maximized" state
/// and the required window geometry. The client should then update its
/// content, drawing it in a maximized state, i.e. without shadow or other
/// decoration outside of the window geometry. The client must also
/// acknowledge the configure when committing the new content (see
/// ack_configure).
/// 
/// It is up to the compositor to decide how and where to maximize the
/// surface, for example which output and what region of the screen should
/// be used.
/// 
/// If the surface was already maximized, the compositor will still emit
/// a configure event with the "maximized" state.
/// 
/// Note that unrelated compositor side state changes may cause
/// configure events to be emitted at any time, meaning trying to
/// match this request to a specific future configure event is
/// futile.
/// 
  Result<void,Object> setMaximized() {
    logLn("XdgSurface::setMaximized ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 9]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setMaximized: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// unmaximize the window
/// 
/// Unmaximize the surface.
/// 
/// After requesting that the surface should be unmaximized, the compositor
/// will respond by emitting a configure event without the "maximized"
/// state. If available, the compositor will include the window geometry
/// dimensions the window had prior to being maximized in the configure
/// request. The client must then update its content, drawing it in a
/// regular state, i.e. potentially with shadow, etc. The client must also
/// acknowledge the configure when committing the new content (see
/// ack_configure).
/// 
/// It is up to the compositor to position the surface after it was
/// unmaximized; usually the position the surface had before maximizing, if
/// applicable.
/// 
/// If the surface was already not maximized, the compositor will still
/// emit a configure event without the "maximized" state.
/// 
/// Note that unrelated compositor side state changes may cause
/// configure events to be emitted at any time, meaning trying to
/// match this request to a specific future configure event is
/// futile.
/// 
  Result<void,Object> unsetMaximized() {
    logLn("XdgSurface::unsetMaximized ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 10]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::unsetMaximized: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// set the window as fullscreen on a monitor
/// 
/// Make the surface fullscreen.
/// 
/// You can specify an output that you would prefer to be fullscreen.
/// If this value is NULL, it's up to the compositor to choose which
/// display will be used to map this surface.
/// 
/// If the surface doesn't cover the whole output, the compositor will
/// position the surface in the center of the output and compensate with
/// black borders filling the rest of the output.
/// 
/// [output]:
  Result<void,Object> setFullscreen(Output output) {
    logLn("XdgSurface::setFullscreen  output: $output");
var arguments = [output];var argTypes = <WaylandType>[WaylandType.object];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 11]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([output.objectId]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setFullscreen: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// 
/// 
  Result<void,Object> unsetFullscreen() {
    logLn("XdgSurface::unsetFullscreen ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 12]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::unsetFullscreen: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// set the window as minimized
/// 
/// Request that the compositor minimize your surface. There is no
/// way to know if the surface is currently minimized, nor is there
/// any way to unset minimization on this surface.
/// 
/// If you are looking to throttle redrawing when minimized, please
/// instead use the wl_surface.frame event for this, as this will
/// also work with live previews on windows in Alt-Tab, Expose or
/// similar compositor features.
/// 
  Result<void,Object> setMinimized() {
    logLn("XdgSurface::setMinimized ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 13]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgSurface::setMinimized: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// suggest a surface change
/// 
/// The configure event asks the client to resize its surface or to
/// change its state.
/// 
/// The width and height arguments specify a hint to the window
/// about how its surface should be resized in window geometry
/// coordinates. See set_window_geometry.
/// 
/// If the width or height arguments are zero, it means the client
/// should decide its own window dimension. This may happen when the
/// compositor need to configure the state of the surface but doesn't
/// have any information about any previous or expected dimension.
/// 
/// The states listed in the event specify how the width/height
/// arguments should be interpreted, and possibly how it should be
/// drawn.
/// 
/// Clients should arrange their surface for the new size and
/// states, and then send a ack_configure request with the serial
/// sent in this configure event at some point before committing
/// the new surface.
/// 
/// If the client receives multiple configure events before it
/// can respond to one, it is free to discard all but the last
/// event it received.
/// 
/// Event handler for Configure
/// - [width]:
/// - [height]:
/// - [states]:
/// - [serial]:
 void onConfigure(XdgSurfaceConfigureEventHandler handler) {
   _configureHandler = handler;
 }

 XdgSurfaceConfigureEventHandler? _configureHandler;

/// surface wants to be closed
/// 
/// The close event is sent by the compositor when the user
/// wants the surface to be closed. This should be equivalent to
/// the user clicking the close button in client-side decorations,
/// if your application has any...
/// 
/// This is only a request that the user intends to close your
/// window. The client may choose to ignore this request, or show
/// a dialog to ask the user to save their data...
/// 
/// Event handler for Close
 void onClose(XdgSurfaceCloseEventHandler handler) {
   _closeHandler = handler;
 }

 XdgSurfaceCloseEventHandler? _closeHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
logLn("XdgSurface.dispatch($opcode, $fd, $data)");
   switch (opcode) {     case 0:

       if (_configureHandler != null) {
var offset = 0;
final width = ByteData.view(data.buffer).getInt32(offset, Endian.little);
offset += 4;
final height = ByteData.view(data.buffer).getInt32(offset, Endian.little);
offset += 4;
final states = getArray(data, offset);
var arrayLength = ByteData.view(data.buffer).getUint32(offset, Endian.little);
offset += 4 + arrayLength;
while (offset % 4 != 0) { offset++; } // Padding
final serial = ByteData.view(data.buffer).getUint32(offset, Endian.little);
offset += 4;
var event = XdgSurfaceConfigureEvent(
width,
height,
states,
serial,
        );
         _configureHandler!(event);
       }
       break;
     case 1:

       if (_closeHandler != null) {
         _closeHandler!(XdgSurfaceCloseEvent());
       }
       break;
   }
 }
}

/// edge values for resizing
/// 
/// These values are used to indicate which edge of a surface
/// is being dragged in a resize operation.
/// 

enum XdgSurfaceResizeEdge {
/// 
  none("none", 0),/// 
  top("top", 1),/// 
  bottom("bottom", 2),/// 
  left("left", 4),/// 
  topLeft("top_left", 5),/// 
  bottomLeft("bottom_left", 6),/// 
  right("right", 8),/// 
  topRight("top_right", 9),/// 
  bottomRight("bottom_right", 10);
const XdgSurfaceResizeEdge(this.enumName, this.enumValue);
final int enumValue;
final String enumName;
@override
toString(){
return "XdgSurfaceResizeEdge {name: $enumName, value: $enumValue}";
}
}

/// types of state on the surface
/// 
/// The different state values used on the surface. This is designed for
/// state values like maximized, fullscreen. It is paired with the
/// configure event to ensure that both the client and the compositor
/// setting the state can be synchronized.
/// 
/// States set in this way are double-buffered, see wl_surface.commit.
/// 
/// Desktop environments may extend this enum by taking up a range of
/// values and documenting the range they chose in this description.
/// They are not required to document the values for the range that they
/// chose. Ideally, any good extensions from a desktop environment should
/// make its way into standardization into this enum.
/// 
/// The current reserved ranges are:
/// 
/// 0x0000 - 0x0FFF: xdg-shell core values, documented below.
/// 0x1000 - 0x1FFF: GNOME
/// 0x2000 - 0x2FFF: EFL
/// 

enum XdgSurfaceState {
/// the surface is maximized
  maximized("maximized", 1),/// the surface is fullscreen
  fullscreen("fullscreen", 2),/// the surface is being resized
  resizing("resizing", 3),/// the surface is now activated
  activated("activated", 4);
const XdgSurfaceState(this.enumName, this.enumValue);
final int enumValue;
final String enumName;
@override
toString(){
return "XdgSurfaceState {name: $enumName, value: $enumValue}";
}
}


/// popup interaction is done
/// 
/// The popup_done event is sent out when a popup is dismissed by the
/// compositor. The client should destroy the xdg_popup object at this
/// point.
/// 
class XdgPopupPopupDoneEvent {
  XdgPopupPopupDoneEvent(
);

@override
toString(){
return "XdgPopupPopupDoneEvent ()";
}
}

typedef XdgPopupPopupDoneEventHandler = void Function(XdgPopupPopupDoneEvent);


/// short-lived, popup surfaces for menus
/// 
/// A popup surface is a short-lived, temporary surface that can be
/// used to implement menus. It takes an explicit grab on the surface
/// that will be dismissed when the user dismisses the popup. This can
/// be done by the user clicking outside the surface, using the keyboard,
/// or even locking the screen through closing the lid or a timeout.
/// 
/// When the popup is dismissed, a popup_done event will be sent out,
/// and at the same time the surface will be unmapped. The xdg_popup
/// object is now inert and cannot be reactivated, so clients should
/// destroy it. Explicitly destroying the xdg_popup object will also
/// dismiss the popup and unmap the surface.
/// 
/// Clients will receive events for all their surfaces during this
/// grab (which is an "owner-events" grab in X11 parlance). This is
/// done so that users can navigate through submenus and other
/// "nested" popup windows without having to dismiss the topmost
/// popup.
/// 
/// Clients that want to dismiss the popup when another surface of
/// their own is clicked should dismiss the popup using the destroy
/// request.
/// 
/// The parent surface must have either an xdg_surface or xdg_popup
/// role.
/// 
/// Specifying an xdg_popup for the parent means that the popups are
/// nested, with this popup now being the topmost popup. Nested
/// popups must be destroyed in the reverse order they were created
/// in, e.g. the only popup you are allowed to destroy at all times
/// is the topmost one.
/// 
/// If there is an existing popup when creating a new popup, the
/// parent must be the current topmost popup.
/// 
/// A parent surface must be mapped before the new popup is mapped.
/// 
/// When compositors choose to dismiss a popup, they will likely
/// dismiss every nested popup as well. When a compositor dismisses
/// popups, it will follow the same dismissing order as required
/// from the client.
/// 
/// The x and y arguments passed when creating the popup object specify
/// where the top left of the popup should be placed, relative to the
/// local surface coordinates of the parent surface. See
/// xdg_shell.get_xdg_popup.
/// 
/// The client must call wl_surface.commit on the corresponding wl_surface
/// for the xdg_popup state to take effect.
/// 
/// For a surface to be mapped by the compositor the client must have
/// committed both the xdg_popup state and a buffer.
/// 
class XdgPopup extends Proxy implements Dispatcher{
  final Context innerContext;
  final version = 1;

  XdgPopup(this.innerContext) : super(innerContext.allocateClientId()){
    innerContext.register(this);
  }


@override
toString(){
return "XdgPopup {name: 'xdg_popup', id: '$objectId', version: '1',}";
}

/// remove xdg_popup interface
/// 
/// This destroys the popup. Explicitly destroying the xdg_popup
/// object will also dismiss the popup, and unmap the surface.
/// 
/// If this xdg_popup is not the "topmost" popup, a protocol error
/// will be sent.
/// 
  Result<void,Object> destroy() {
innerContext.unRegister(this);
    logLn("XdgPopup::destroy ");
var arguments = [];var argTypes = <WaylandType>[];
var calclulatedSize  = calculateSize(argTypes, arguments);
final bytesBuilder = BytesBuilder();
bytesBuilder.add(Uint32List.fromList([objectId, (calclulatedSize << 16) | 0]).buffer.asUint8List());
    try{
    innerContext.sendMessage(bytesBuilder.toBytes(), );
    }catch (e) {
      logLn("Exception in XdgPopup::destroy: $e");
   return Failure(e);
    }
    return Success(Object());
  }

/// popup interaction is done
/// 
/// The popup_done event is sent out when a popup is dismissed by the
/// compositor. The client should destroy the xdg_popup object at this
/// point.
/// 
/// Event handler for PopupDone
 void onPopupDone(XdgPopupPopupDoneEventHandler handler) {
   _popupDoneHandler = handler;
 }

 XdgPopupPopupDoneEventHandler? _popupDoneHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
logLn("XdgPopup.dispatch($opcode, $fd, $data)");
   switch (opcode) {     case 0:

       if (_popupDoneHandler != null) {
         _popupDoneHandler!(XdgPopupPopupDoneEvent());
       }
       break;
   }
 }
}

