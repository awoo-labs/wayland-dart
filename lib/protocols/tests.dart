// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland/-/raw/main/protocol/tests.xml
//
// build_time_wayland_tests Protocol Copyright:
///
/// Copyright Â© 2017 Samsung Electronics Co., Ltd
///
/// Permission is hereby granted, free of charge, to any person
/// obtaining a copy of this software and associated documentation files
/// (the "Software"), to deal in the Software without restriction,
/// including without limitation the rights to use, copy, modify, merge,
/// publish, distribute, sublicense, and/or sell copies of the Software,
/// and to permit persons to whom the Software is furnished to do so,
/// subject to the following conditions:
///
/// The above copyright notice and this permission notice (including the
/// next paragraph) shall be included in all copies or substantial
/// portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
/// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
/// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
/// NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
/// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
/// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
/// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
/// SOFTWARE.
///

library client;

import 'package:wayland/wayland.dart';
import 'dart:typed_data';
// AWOO-MIXINS

class FdPasserPreFdEvent {
  FdPasserPreFdEvent();

  @override
  toString() {
    return "FdPasserPreFdEvent ()";
  }
}

typedef FdPasserPreFdEventHandler = void Function(FdPasserPreFdEvent);

/// passes a file descriptor
class FdPasserFdEvent {
  /// file descriptor
  final int fd;

  FdPasserFdEvent(
    this.fd,
  );

  @override
  toString() {
    return "FdPasserFdEvent (fd: $fd)";
  }
}

typedef FdPasserFdEventHandler = void Function(FdPasserFdEvent);

/// Sends an event with an fd
///
/// A trivial interface for fd passing tests.
///
class FdPasser extends Proxy implements Dispatcher {
  final Context innerContext;
  final version = 2;

  FdPasser(this.innerContext) : super(innerContext.allocateClientId()) {
    innerContext.register(this);
  }

  @override
  toString() {
    return "FdPasser {name: 'fd_passer', id: '$objectId', version: '2',}";
  }

  ///
  ///
  Result<void, Object> destroy() {
    innerContext.unRegister(this);
    logLn("FdPasser::destroy ");
    var arguments = [];
    var argTypes = <WaylandType>[];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 0])
            .buffer
            .asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in FdPasser::destroy: $e");
      return Failure(e);
    }
    return Success(Object());
  }

  /// register another fd passer with this one
  ///
  /// Tells this fd passer object about another one to send events
  /// to for more complicated fd leak tests.
  ///
  /// [passer]:
  Result<void, Object> conjoin(FdPasser passer) {
    logLn("FdPasser::conjoin  passer: $passer");
    var arguments = [passer];
    var argTypes = <WaylandType>[WaylandType.object];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 1])
            .buffer
            .asUint8List());
    bytesBuilder
        .add(Uint32List.fromList([passer.objectId]).buffer.asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in FdPasser::conjoin: $e");
      return Failure(e);
    }
    return Success(Object());
  }

  ///
  ///
  /// Event handler for PreFd
  void onPreFd(FdPasserPreFdEventHandler handler) {
    _preFdHandler = handler;
  }

  FdPasserPreFdEventHandler? _preFdHandler;

  /// passes a file descriptor
  ///
  /// Event handler for Fd
  /// - [fd]: file descriptor
  void onFd(FdPasserFdEventHandler handler) {
    _fdHandler = handler;
  }

  FdPasserFdEventHandler? _fdHandler;

  @override
  void dispatch(int opcode, int fd, Uint8List data) {
    logLn("FdPasser.dispatch($opcode, $fd, $data)");
    switch (opcode) {
      case 0:
        if (_preFdHandler != null) {
          _preFdHandler!(FdPasserPreFdEvent());
        }
        break;
      case 1:
        if (fd != -1) {}
        if (_fdHandler != null) {
          var offset = 0;
          final fd2 = fd;
          var event = FdPasserFdEvent(
            fd2,
          );
          _fdHandler!(event);
        }
        break;
    }
  }
}
