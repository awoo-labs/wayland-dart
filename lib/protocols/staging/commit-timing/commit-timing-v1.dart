// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/commit-timing/commit-timing-v1.xml
//
// commit_timing_v1 Protocol Copyright:
///
/// Copyright Â© 2023 Valve Corporation
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/protocols/wayland.dart';
import 'dart:typed_data';
// AWOO-MIXINS

/// commit timing
///
/// When a compositor latches on to new content updates it will check for
/// any number of requirements of the available content updates (such as
/// fences of all buffers being signalled) to consider the update ready.
///
/// This protocol provides a method for adding a time constraint to surface
/// content. This constraint indicates to the compositor that a content
/// update should be presented as closely as possible to, but not before,
/// a specified time.
///
/// This protocol does not change the Wayland property that content
/// updates are applied in the order they are received, even when some
/// content updates contain timestamps and others do not.
///
/// To provide timestamps, this global factory interface must be used to
/// acquire a wp_commit_timing_v1 object for a surface, which may then be
/// used to provide timestamp information for commits.
///
/// Warning! The protocol described in this file is currently in the testing
/// phase. Backward compatible changes may be added together with the
/// corresponding interface version bump. Backward incompatible changes can
/// only be done by creating a new major version of the extension.
///
class WpCommitTimingManagerV1 extends Proxy {
  final Context innerContext;
  final version = 1;

  WpCommitTimingManagerV1(this.innerContext)
      : super(innerContext.allocateClientId()) {
    innerContext.register(this);
  }

  @override
  toString() {
    return "WpCommitTimingManagerV1 {name: 'wp_commit_timing_manager_v1', id: '$objectId', version: '1',}";
  }

  /// unbind from the commit timing interface
  ///
  /// Informs the server that the client will no longer be using
  /// this protocol object. Existing objects created by this object
  /// are not affected.
  ///
  Result<void, Object> destroy() {
    innerContext.unRegister(this);
    logLn("WpCommitTimingManagerV1::destroy ");
    var arguments = [];
    var argTypes = <WaylandType>[];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 0])
            .buffer
            .asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in WpCommitTimingManagerV1::destroy: $e");
      return Failure(e);
    }
    return Success(Object());
  }

  /// request commit timer interface for surface
  ///
  /// Establish a timing controller for a surface.
  ///
  /// Only one commit timer can be created for a surface, or a
  /// commit_timer_exists protocol error will be generated.
  ///
  /// [id]:
  /// [surface]:
  Result<WpCommitTimerV1, Object> getTimer(Surface surface) {
    var id = WpCommitTimerV1(innerContext);
    logLn("WpCommitTimingManagerV1::getTimer  id: $id surface: $surface");
    var arguments = [id, surface];
    var argTypes = <WaylandType>[WaylandType.newId, WaylandType.object];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 1])
            .buffer
            .asUint8List());
    bytesBuilder.add(Uint32List.fromList([id.objectId]).buffer.asUint8List());
    bytesBuilder
        .add(Uint32List.fromList([surface.objectId]).buffer.asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in WpCommitTimingManagerV1::getTimer: $e");
      return Failure(e);
    }
    return Success(id);
  }
}

///
///

enum WpCommitTimingManagerV1Error {
  /// commit timer already exists for surface
  commitTimerExists("commit_timer_exists", 0);

  const WpCommitTimingManagerV1Error(this.enumName, this.enumValue);
  final int enumValue;
  final String enumName;
  @override
  toString() {
    return "WpCommitTimingManagerV1Error {name: $enumName, value: $enumValue}";
  }
}

/// Surface commit timer
///
/// An object to set a time constraint for a content update on a surface.
///
class WpCommitTimerV1 extends Proxy {
  final Context innerContext;
  final version = 1;

  WpCommitTimerV1(this.innerContext) : super(innerContext.allocateClientId()) {
    innerContext.register(this);
  }

  @override
  toString() {
    return "WpCommitTimerV1 {name: 'wp_commit_timer_v1', id: '$objectId', version: '1',}";
  }

  /// Specify time the following commit takes effect
  ///
  /// Provide a timing constraint for a surface content update.
  ///
  /// A set_timestamp request may be made before a wl_surface.commit to
  /// tell the compositor that the content is intended to be presented
  /// as closely as possible to, but not before, the specified time.
  /// The time is in the domain of the compositor's presentation clock.
  ///
  /// An invalid_timestamp error will be generated for invalid tv_nsec.
  ///
  /// If a timestamp already exists on the surface, a timestamp_exists
  /// error is generated.
  ///
  /// Requesting set_timestamp after the commit_timer object's surface is
  /// destroyed will generate a "surface_destroyed" error.
  ///
  /// [tv_sec_hi]: high 32 bits of the seconds part of target time
  /// [tv_sec_lo]: low 32 bits of the seconds part of target time
  /// [tv_nsec]: nanoseconds part of target time
  Result<void, Object> setTimestamp(int tvSecHi, int tvSecLo, int tvNsec) {
    logLn(
        "WpCommitTimerV1::setTimestamp  tvSecHi: $tvSecHi tvSecLo: $tvSecLo tvNsec: $tvNsec");
    var arguments = [tvSecHi, tvSecLo, tvNsec];
    var argTypes = <WaylandType>[
      WaylandType.uint,
      WaylandType.uint,
      WaylandType.uint
    ];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 0])
            .buffer
            .asUint8List());
    bytesBuilder.add(Uint32List.fromList([tvSecHi]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([tvSecLo]).buffer.asUint8List());
    bytesBuilder.add(Uint32List.fromList([tvNsec]).buffer.asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in WpCommitTimerV1::setTimestamp: $e");
      return Failure(e);
    }
    return Success(Object());
  }

  /// Destroy the timer
  ///
  /// Informs the server that the client will no longer be using
  /// this protocol object.
  ///
  /// Existing timing constraints are not affected by the destruction.
  ///
  Result<void, Object> destroy() {
    innerContext.unRegister(this);
    logLn("WpCommitTimerV1::destroy ");
    var arguments = [];
    var argTypes = <WaylandType>[];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 1])
            .buffer
            .asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in WpCommitTimerV1::destroy: $e");
      return Failure(e);
    }
    return Success(Object());
  }
}

///
///

enum WpCommitTimerV1Error {
  /// timestamp contains an invalid value
  invalidTimestamp("invalid_timestamp", 0),

  /// timestamp exists
  timestampExists("timestamp_exists", 1),

  /// the associated surface no longer exists
  surfaceDestroyed("surface_destroyed", 2);

  const WpCommitTimerV1Error(this.enumName, this.enumValue);
  final int enumValue;
  final String enumName;
  @override
  toString() {
    return "WpCommitTimerV1Error {name: $enumName, value: $enumValue}";
  }
}
