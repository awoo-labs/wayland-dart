// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/xdg-system-bell/xdg-system-bell-v1.xml
//
// xdg_system_bell_v1 Protocol Copyright:
///
/// Copyright Â© 2016, 2023 Red Hat
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/protocols/wayland.dart';
import 'dart:typed_data';
// AWOO-MIXINS

/// system bell
///
/// This global interface enables clients to ring the system bell.
///
/// Warning! The protocol described in this file is currently in the testing
/// phase. Backward compatible changes may be added together with the
/// corresponding interface version bump. Backward incompatible changes can
/// only be done by creating a new major version of the extension.
///
class XdgSystemBellV1 extends Proxy {
  final Context innerContext;
  final version = 1;

  XdgSystemBellV1(this.innerContext) : super(innerContext.allocateClientId()) {
    innerContext.register(this);
  }

  @override
  toString() {
    return "XdgSystemBellV1 {name: 'xdg_system_bell_v1', id: '$objectId', version: '1',}";
  }

  /// destroy the system bell object
  ///
  /// Notify that the object will no longer be used.
  ///
  Result<void, Object> destroy() {
    innerContext.unRegister(this);
    logLn("XdgSystemBellV1::destroy ");
    var arguments = [];
    var argTypes = <WaylandType>[];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 0])
            .buffer
            .asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in XdgSystemBellV1::destroy: $e");
      return Failure(e);
    }
    return Success(Object());
  }

  /// ring the system bell
  ///
  /// This requests rings the system bell on behalf of a client. How ringing
  /// the bell is implemented is up to the compositor. It may be an audible
  /// sound, a visual feedback of some kind, or any other thing including
  /// nothing.
  ///
  /// The passed surface should correspond to a toplevel like surface role,
  /// or be null, meaning the client doesn't have a particular toplevel it
  /// wants to associate the bell ringing with. See the xdg-shell protocol
  /// extension for a toplevel like surface role.
  ///
  /// [surface]: associated surface
  Result<void, Object> ring(Surface surface) {
    logLn("XdgSystemBellV1::ring  surface: $surface");
    var arguments = [surface];
    var argTypes = <WaylandType>[WaylandType.object];
    var calclulatedSize = calculateSize(argTypes, arguments);
    final bytesBuilder = BytesBuilder();
    bytesBuilder.add(
        Uint32List.fromList([objectId, (calclulatedSize << 16) | 1])
            .buffer
            .asUint8List());
    bytesBuilder
        .add(Uint32List.fromList([surface.objectId]).buffer.asUint8List());
    try {
      innerContext.sendMessage(
        bytesBuilder.toBytes(),
      );
    } catch (e) {
      logLn("Exception in XdgSystemBellV1::ring: $e");
      return Failure(e);
    }
    return Success(Object());
  }
}
