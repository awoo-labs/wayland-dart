import 'dart:io';

import 'package:path/path.dart';
import 'package:wayland/protocol/type.dart';
import 'package:wayland/scanner/types.dart';
import 'package:xml/xml.dart';
import 'package:http/http.dart' as http;

class Generator {
  final String inputFile;
  final String outputFile;
  final String packageName;
  final String prefix;
  final String suffix;
  final String cacheDir;
  final List<String> imports;
  late Protocol protocol;

  Generator(
      {this.inputFile = '',
      this.outputFile = '',
      this.packageName = '',
      this.prefix = '',
      this.suffix = '',
      this.imports = const [],
      this.cacheDir = '.wayland-protocol-cache'});

  Directory getCacheDir() {
    if (Directory.current.path.endsWith('bin')) {
      return Directory(joinAll([Directory.current.parent.path, cacheDir]));
    }

    final cachePath = Directory(cacheDir);
    if (!cachePath.existsSync()) {
      cachePath.createSync();
    }
    return cachePath;
  }

  Future<void> run() async {
    if (inputFile.isEmpty || outputFile.isEmpty) {
      throw Exception('inbut file or output file is empty');
    }

    final xmlContent = await getInputFile(inputFile);
    final document = XmlDocument.parse(xmlContent);
    protocol = Protocol.fromXml(document.rootElement);

    final output = StringBuffer();

    // Header
    output.writeln('// Generated by dart-wayland-scanner');
    output.writeln('// https://github.com/your-repo/dart-wayland-scanner');
    output.writeln('// XML file : $inputFile');
    output.writeln('//');
    output.writeln('// ${protocol.name} Protocol Copyright: ');
    output.writeln(comment(protocol.copyright));
    output.writeln();

    output.writeln('library $packageName;');
    output.writeln();

    // Imports
    // if (protocol.name != 'wayland') {
    output.writeln("import 'package:wayland/wayland.dart';");

    if (protocol.name != 'wayland') {
      output.writeln("import 'package:wayland/generated/wayland.dart';");
    }

    for (final imp in imports) {
      output.writeln("import 'package:wayland/generated/$imp';");
    }

    output.writeln("import 'dart:typed_data';");
    // output.writeln("import 'package:wayland/src/wayland_client.dart';");
    // }

    var interfaceCalled = [];
    // Interfaces
    for (final interface in protocol.interfaces) {
      if (interfaceCalled.contains(interface.name)) {
        print('trying to call ${interface.name} again');
        continue;
      }
      writeInterface(output, interface);
      interfaceCalled.add(interface.name);
    }

    var outFile = File(outputFile);

    if (!outFile.existsSync()) {
      outFile.createSync(recursive: true);
    }

    await File(outputFile).writeAsString(output.toString());
    print('Generated Dart code written to $outputFile');
  }

  Future<String> getInputFile(String file) async {
    String cacheDir = getCacheDir().path;

    if (file.startsWith('http')) {
      file = file.replaceFirst('http://', 'https://');

      final cacheFile = File(join(cacheDir, basename(file)));

      if (cacheFile.existsSync()) {
        return await cacheFile.readAsString();
      }

      final response = await http.get(Uri.parse(file));
      var content = response.body;

      cacheFile.writeAsString(content);

      return content;
    } else {
      return await File(file).readAsString();
    }
  }

  void writeRequest(
      StringBuffer output, String ifaceName, int index, Request request) {
    final requestName = toLowerCamel(request.name);

    output.writeln(' /// ${request.description.summary}');
    output.writeln(comment(request.description.text));

    final params = <String>[];
    for (final arg in request.args) {
      final argName = toCamel(arg.name);
      final argType = getDartType(arg.type, arg.interface);
      params.add('$argType $argName');
    }

    // Generate the request method signature
    output.writeln(' void $requestName(${params.join(', ')}) {');

    // Generate the request message
    output.writeln('   final message = WaylandMessage(');
    output.writeln('     context.allocateClientId(),');
    output.writeln('     $index,');
    output.writeln('     [');
    for (final arg in request.args) {
      final argName = toLowerCamel(arg.name);
      if (arg.type == 'object' || arg.type == 'new_id') {
        output.writeln('       $argName,');
      } else {
        output.writeln('       $argName,');
      }
    }
    output.writeln('     ],');
    output.writeln('     [');
    for (final arg in request.args) {
      output.writeln('       ${waylandStringToType(arg.type).toString()}},');
    }
    output.writeln('     ],');
    output.writeln('   );');
    output.writeln('   context.sendMessage(message);');
    output.writeln(' }');
    output.writeln();
  }

  String fixName(String name) {
    final illegalArgs = <String, String>{
      'class': 'clazz',
      'class_': 'clazz',
      'default': 'defaulted',
      'enum': 'enumm',
    };
    if (illegalArgs.containsKey(name)) {
      return illegalArgs[name]!;
    }
    return name;
  }

  void writeEnum(StringBuffer output, String ifaceName, Enum enum_) {
    final enumName = toLowerCamel(enum_.name);

    output.writeln('/// ${enum_.description.summary}');
    output.writeln(comment(enum_.description.text));
    output.writeln();
    output.writeln('enum $ifaceName$enumName {');

    for (final entry in enum_.entries) {
      var entryName = toLowerCamel(fixName(entry.name));

      // Check if the result is a number and prefix with 'W' if it is
      if (int.tryParse(entryName) != null) {
        entryName = 'w$entryName';
      }
      final summary = entry.summary.replaceAll(RegExp(r'\n'), '');
      output.writeln('  /// $summary');
      output.writeln('  $entryName,');
    }

    output.writeln('}');
    output.writeln();
  }

  String toLowerCamel(String s) {
    // Remove prefix and suffix if they exist
    s = s.replaceFirst(RegExp('^$prefix'), '');
    s = s.replaceFirst(RegExp('$suffix\$'), '');

    // Split by underscores
    List<String> parts = s.split('_').where((ss) => ss.isNotEmpty).toList();

    // Handle the case where there are no underscores
    if (parts.length == 1) {
      s = parts.first;
    } else {
      if (parts.first.isEmpty) {
        s = parts[1];
      } else if (parts[1].isEmpty && parts[0].isNotEmpty) {
        return parts[0];
      } else {
        // Capitalize each part except the first one
        String firstPart = parts.first.toLowerCase();
        List<String> capitalizedParts = parts
            .skip(1)
            .map((part) =>
                part[0].toUpperCase() + part.substring(1).toLowerCase())
            .toList();

        // Combine the first part with the capitalized parts
        s = firstPart + capitalizedParts.join('');
      }
    }

    return s;
  }

  String toCamel(String s) {
    final camel = toLowerCamel(s);
    return camel[0].toLowerCase() + camel.substring(1);
  }

  String toUpper(String s) {
    final camel = toLowerCamel(s);
    return camel[0].toUpperCase() + camel.substring(1);
  }

  String comment(String s) {
    return s.split('\n').map((line) => '/// ${line.trim()}').join('\n');
  }

  String getDartType(String type, String interface) {
    switch (type) {
      case 'int':
      case 'uint':
        return 'int';
      case 'fixed':
        return 'double';
      case 'string':
        return 'String';
      case 'object':
      case 'new_id':
        return 'int';
      case 'array':
        return 'List<int>';
      case 'fd':
        return 'int';
      default:
        return 'dynamic';
    }
  }

  void writeInterface(StringBuffer output, Interface interface) {
    final ifaceName = toUpper(interface.name);

    output.writeln('/// ${interface.description.summary}');
    output.writeln(comment(interface.description.text));

    output.write('class $ifaceName extends Proxy');

    if (interface.events.isNotEmpty) {
      output.write(' implements Dispatcher');
    }
    output.write('{');
    output.writeln('');
    output.writeln('  final Context context;');
    // output.writeln('  final WaylandConnection _client;');
    output.writeln();
    output.writeln(
        '  $ifaceName(this.context) : super(context.allocateClientId());');
    output.writeln();

    // Implement requests
    for (var i = 0; i < interface.requests.length; i++) {
      writeRequestImpl(output, ifaceName, i, interface.requests[i]);
    }

    // Events
    for (final event in interface.events) {
      writeEvent(output, ifaceName, event);
    }

    writeEventDispatcher(output, ifaceName, interface);

    output.writeln('}');
    output.writeln();

    // Enums
    for (final enum_ in interface.enums) {
      writeEnum(output, ifaceName, enum_);
    }
  }

  void writeRequestImpl(
      StringBuffer output, String ifaceName, int opcode, Request request) {
    final requestName = toCamel(request.name);

    final params = <String>[];
    final args = <String>[];
    final argTypes = <String>[];

    for (final arg in request.args) {
      final argName = fixName(toLowerCamel(arg.name));
      var argType = getDartType(arg.type, arg.interface);

      if (arg.type == 'new_id') {
        continue;
      }

      if (arg.type == 'object') {
        if (arg.name == "sibling") {
          print("");
        }
        if (arg.interface.isNotEmpty) {
          argType = toUpper(arg.interface);
        } else {
          argType = toUpper(argName);
        }
      }
      params.add('$argType $argName');
      args.add(argName);

      argTypes.add(waylandStringToType(arg.type).toString());
    }

    // Generate the request method implementation
    output.writeln('  Future<void> $requestName(${params.join(', ')}) async {');

    for (final arg in request.args) {
      final argName = fixName(toLowerCamel(arg.name));

      if (arg.type == 'new_id' && arg.interface.isNotEmpty) {
        output.writeln('  var ${argName} =  ${toUpper(ifaceName)}(context);');
      }
    }

    output.writeln('    final message = WaylandMessage(');
    output.writeln('      context.allocateClientId(),');
    output.writeln('      $opcode,');
    output.writeln('      [');
    for (final arg in request.args) {
      final argName = toLowerCamel(fixName(arg.name));
      if (arg.type == 'object' || arg.type == 'new_id') {
        output.writeln('        $argName,');
      } else {
        output.writeln('        $argName,');
      }
    }
    output.writeln('      ],');
    output.writeln('      [');
    for (final arg in request.args) {
      output.writeln('        ${waylandStringToType(arg.type).toString()},');
    }
    output.writeln('      ],');
    output.writeln('    );');
    output.writeln('    context.sendMessage(message);');
    output.writeln('  }');
    output.writeln();
  }

  void writeEvent(StringBuffer output, String ifaceName, Event event) {
    final eventName = toCamel(event.name);

    output.writeln(' /// ${event.description.summary}');
    output.writeln(comment(event.description.text));

    final params = <String>[];
    for (final arg in event.args) {
      final argName = toLowerCamel(arg.name);
      final argType = getDartType(arg.type, arg.interface);
      params.add('$argType $argName');
    }

    // // Generate the event handler method signature
    // output.writeln(
    //     ' void on$eventName(void Function(${params.join(', ')}) handler);');
    // output.writeln();

    // Generate the stub implementation
    output.writeln(
        ' void on$eventName(void Function(${params.join(', ')}) handler) {');
    output.writeln('   _${toLowerCamel(eventName)}Handler = handler;');
    output.writeln(' }');
    output.writeln();

    // Generate the private handler field
    output.writeln(
        ' void Function(${params.join(', ')})? _${toLowerCamel(eventName)}Handler;');
    output.writeln();
  }

  void writeEventDispatcher(
      StringBuffer output, String ifaceName, Interface iface) {
    if (iface.events.isEmpty) return;

    output.writeln(' @override');
    output.writeln(' void dispatch(int opcode, int fd, Uint8List data) {');
    output.writeln('   switch (opcode) {');

    for (var i = 0; i < iface.events.length; i++) {
      final event = iface.events[i];
      final eventName = toCamel(event.name);

      output.writeln('     case $i:');
      output
          .writeln('       if (_${toLowerCamel(eventName)}Handler != null) {');
      output.writeln('         _${toLowerCamel(eventName)}Handler!(');

      var offset = 0;
      for (final arg in event.args) {
        switch (arg.type) {
          case 'int':
          case 'uint':
            output.writeln(
                '           ByteData.view(data.buffer).getInt32($offset, Endian.host),');
            offset += 4;
            break;
          case 'fixed':
            output.writeln(
                '           fixedToDouble(ByteData.view(data.buffer).getInt32($offset, Endian.host)),');
            offset += 4;
            break;
          case 'string':
            output.writeln('           getString(data, $offset),');
            offset += 4;
            break;
          case 'object':
          case 'new_id':
            output.writeln(
                '           context.getProxy(ByteData.view(data.buffer).getUint32($offset, Endian.host)).id,');
            offset += 4;
            break;
          case 'array':
            output.writeln('           getArray(data, $offset),');
            offset += 4;
            break;
          case 'fd':
            output.writeln('           fd,');
            break;
          default:
            output.writeln('           // Unhandled type: ${arg.type}');
        }
      }
      output.writeln('         );');
      output.writeln('       }');
      output.writeln('       break;');
    }

    output.writeln('   }');
    output.writeln(' }');
  }
}
