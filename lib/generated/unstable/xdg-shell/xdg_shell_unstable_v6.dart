// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/unstable/xdg-shell/xdg-shell-unstable-v6.xml
//
// xdg_shell_unstable_v6 Protocol Copyright: 
/// 
/// Copyright © 2008-2013 Kristian Høgsberg
/// Copyright © 2013      Rafael Antognolli
/// Copyright © 2013      Jasper St. Pierre
/// Copyright © 2010-2013 Intel Corporation
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// create desktop-style surfaces
/// 
/// xdg_shell allows clients to turn a wl_surface into a "real window"
/// which can be dragged, resized, stacked, and moved around by the
/// user. Everything about this interface is suited towards traditional
/// desktop environments.
/// 
class ZxdgShellV6 extends Proxy implements Dispatcher{
  final Context context;

  ZxdgShellV6(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> createPositioner() async {
  var id =  ZxdgShellV6(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
      ],
      [
        WaylandType.newId,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> getXdgSurface(Surface surface) async {
  var id =  ZxdgShellV6(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        id,
        surface,
      ],
      [
        WaylandType.newId,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> pong(int serial) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      3,
      [
        serial,
      ],
      [
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

 /// check if the client is alive
/// 
/// The ping event asks the client if it's still alive. Pass the
/// serial specified in the event back to the compositor by sending
/// a "pong" request back with the specified serial. See xdg_shell.ping.
/// 
/// Compositors can use this to determine if the client is still
/// alive. It's unspecified what will happen if the client doesn't
/// respond to the ping request, or in what timeframe. Clients should
/// try to respond in a reasonable amount of time.
/// 
/// A compositor is free to ping in any way it wants, but a client must
/// always respond to any xdg_shell object it created.
/// 
 void onping(void Function(int serial) handler) {
   _pingHandler = handler;
 }

 void Function(int serial)? _pingHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_pingHandler != null) {
         _pingHandler!(
           ByteData.view(data.buffer).getInt32(0, Endian.host),
         );
       }
       break;
   }
 }
}

/// 
/// 

enum ZxdgShellV6error {
  /// given wl_surface has another role
  role,
  /// xdg_shell was destroyed before children
  defunctSurfaces,
  /// the client tried to map or destroy a non-topmost popup
  notTheTopmostPopup,
  /// the client specified an invalid popup parent surface
  invalidPopupParent,
  /// the client provided an invalid surface state
  invalidSurfaceState,
  /// the client provided an invalid positioner
  invalidPositioner,
}

/// child surface positioner
/// 
/// The xdg_positioner provides a collection of rules for the placement of a
/// child surface relative to a parent surface. Rules can be defined to ensure
/// the child surface remains within the visible area's borders, and to
/// specify how the child surface changes its position, such as sliding along
/// an axis, or flipping around a rectangle. These positioner-created rules are
/// constrained by the requirement that a child surface must intersect with or
/// be at least partially adjacent to its parent surface.
/// 
/// See the various requests for details about possible rules.
/// 
/// At the time of the request, the compositor makes a copy of the rules
/// specified by the xdg_positioner. Thus, after the request is complete the
/// xdg_positioner object can be destroyed or reused; further changes to the
/// object will have no effect on previous usages.
/// 
/// For an xdg_positioner object to be considered complete, it must have a
/// non-zero size set by set_size, and a non-zero anchor rectangle set by
/// set_anchor_rect. Passing an incomplete xdg_positioner object when
/// positioning a surface raises an error.
/// 
class ZxdgPositionerV6 extends Proxy{
  final Context context;

  ZxdgPositionerV6(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setSize(int width, int height) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        width,
        height,
      ],
      [
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setAnchorRect(int x, int y, int width, int height) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        x,
        y,
        width,
        height,
      ],
      [
        WaylandType.int,
        WaylandType.int,
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setAnchor(int anchor) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      3,
      [
        anchor,
      ],
      [
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setGravity(int gravity) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      4,
      [
        gravity,
      ],
      [
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setConstraintAdjustment(int constraintAdjustment) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      5,
      [
        constraintAdjustment,
      ],
      [
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setOffset(int x, int y) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      6,
      [
        x,
        y,
      ],
      [
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum ZxdgPositionerV6error {
  /// invalid input provided
  invalidInput,
}

/// 
/// 

enum ZxdgPositionerV6anchor {
  /// the center of the anchor rectangle
  none,
  /// the top edge of the anchor rectangle
  top,
  /// the bottom edge of the anchor rectangle
  bottom,
  /// the left edge of the anchor rectangle
  left,
  /// the right edge of the anchor rectangle
  right,
}

/// 
/// 

enum ZxdgPositionerV6gravity {
  /// center over the anchor edge
  none,
  /// position above the anchor edge
  top,
  /// position below the anchor edge
  bottom,
  /// position to the left of the anchor edge
  left,
  /// position to the right of the anchor edge
  right,
}

/// constraint adjustments
/// 
/// The constraint adjustment value define ways the compositor will adjust
/// the position of the surface, if the unadjusted position would result
/// in the surface being partly constrained.
/// 
/// Whether a surface is considered 'constrained' is left to the compositor
/// to determine. For example, the surface may be partly outside the
/// compositor's defined 'work area', thus necessitating the child surface's
/// position be adjusted until it is entirely inside the work area.
/// 
/// The adjustments can be combined, according to a defined precedence: 1)
/// Flip, 2) Slide, 3) Resize.
/// 

enum ZxdgPositionerV6constraintAdjustment {
  /// 
  none,
  /// 
  slideX,
  /// 
  slideY,
  /// 
  flipX,
  /// 
  flipY,
  /// 
  resizeX,
  /// 
  resizeY,
}

/// desktop user interface surface base interface
/// 
/// An interface that may be implemented by a wl_surface, for
/// implementations that provide a desktop-style user interface.
/// 
/// It provides a base set of functionality required to construct user
/// interface elements requiring management by the compositor, such as
/// toplevel windows, menus, etc. The types of functionality are split into
/// xdg_surface roles.
/// 
/// Creating an xdg_surface does not set the role for a wl_surface. In order
/// to map an xdg_surface, the client must create a role-specific object
/// using, e.g., get_toplevel, get_popup. The wl_surface for any given
/// xdg_surface can have at most one role, and may not be assigned any role
/// not based on xdg_surface.
/// 
/// A role must be assigned before any other requests are made to the
/// xdg_surface object.
/// 
/// The client must call wl_surface.commit on the corresponding wl_surface
/// for the xdg_surface state to take effect.
/// 
/// Creating an xdg_surface from a wl_surface which has a buffer attached or
/// committed is a client error, and any attempts by a client to attach or
/// manipulate a buffer prior to the first xdg_surface.configure call must
/// also be treated as errors.
/// 
/// For a surface to be mapped by the compositor, the following conditions
/// must be met: (1) the client has assigned an xdg_surface based role to the
/// surface, (2) the client has set and committed the xdg_surface state and
/// the role dependent state to the surface and (3) the client has committed a
/// buffer to the surface.
/// 
class ZxdgSurfaceV6 extends Proxy implements Dispatcher{
  final Context context;

  ZxdgSurfaceV6(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> getToplevel() async {
  var id =  ZxdgSurfaceV6(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
      ],
      [
        WaylandType.newId,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> getPopup(ZxdgSurfaceV6 parent, ZxdgPositionerV6 positioner) async {
  var id =  ZxdgSurfaceV6(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        id,
        parent,
        positioner,
      ],
      [
        WaylandType.newId,
        WaylandType.object,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setWindowGeometry(int x, int y, int width, int height) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      3,
      [
        x,
        y,
        width,
        height,
      ],
      [
        WaylandType.int,
        WaylandType.int,
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> ackConfigure(int serial) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      4,
      [
        serial,
      ],
      [
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

 /// suggest a surface change
/// 
/// The configure event marks the end of a configure sequence. A configure
/// sequence is a set of one or more events configuring the state of the
/// xdg_surface, including the final xdg_surface.configure event.
/// 
/// Where applicable, xdg_surface surface roles will during a configure
/// sequence extend this event as a latched state sent as events before the
/// xdg_surface.configure event. Such events should be considered to make up
/// a set of atomically applied configuration states, where the
/// xdg_surface.configure commits the accumulated state.
/// 
/// Clients should arrange their surface for the new states, and then send
/// an ack_configure request with the serial sent in this configure event at
/// some point before committing the new surface.
/// 
/// If the client receives multiple configure events before it can respond
/// to one, it is free to discard all but the last event it received.
/// 
 void onconfigure(void Function(int serial) handler) {
   _configureHandler = handler;
 }

 void Function(int serial)? _configureHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_configureHandler != null) {
         _configureHandler!(
           ByteData.view(data.buffer).getInt32(0, Endian.host),
         );
       }
       break;
   }
 }
}

/// 
/// 

enum ZxdgSurfaceV6error {
  /// 
  notConstructed,
  /// 
  alreadyConstructed,
  /// 
  unconfiguredBuffer,
}

/// toplevel surface
/// 
/// This interface defines an xdg_surface role which allows a surface to,
/// among other things, set window-like properties such as maximize,
/// fullscreen, and minimize, set application-specific metadata like title and
/// id, and well as trigger user interactive operations such as interactive
/// resize and move.
/// 
class ZxdgToplevelV6 extends Proxy implements Dispatcher{
  final Context context;

  ZxdgToplevelV6(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setParent(ZxdgToplevelV6 parent) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        parent,
      ],
      [
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setTitle(String title) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        title,
      ],
      [
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setAppId(String appId) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      3,
      [
        appId,
      ],
      [
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> showWindowMenu(Seat seat, int serial, int x, int y) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      4,
      [
        seat,
        serial,
        x,
        y,
      ],
      [
        WaylandType.object,
        WaylandType.uint,
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> move(Seat seat, int serial) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      5,
      [
        seat,
        serial,
      ],
      [
        WaylandType.object,
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> resize(Seat seat, int serial, int edges) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      6,
      [
        seat,
        serial,
        edges,
      ],
      [
        WaylandType.object,
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setMaxSize(int width, int height) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      7,
      [
        width,
        height,
      ],
      [
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setMinSize(int width, int height) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      8,
      [
        width,
        height,
      ],
      [
        WaylandType.int,
        WaylandType.int,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setMaximized() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      9,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> unsetMaximized() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      10,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setFullscreen(Output output) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      11,
      [
        output,
      ],
      [
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> unsetFullscreen() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      12,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setMinimized() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      13,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

 /// suggest a surface change
/// 
/// This configure event asks the client to resize its toplevel surface or
/// to change its state. The configured state should not be applied
/// immediately. See xdg_surface.configure for details.
/// 
/// The width and height arguments specify a hint to the window
/// about how its surface should be resized in window geometry
/// coordinates. See set_window_geometry.
/// 
/// If the width or height arguments are zero, it means the client
/// should decide its own window dimension. This may happen when the
/// compositor needs to configure the state of the surface but doesn't
/// have any information about any previous or expected dimension.
/// 
/// The states listed in the event specify how the width/height
/// arguments should be interpreted, and possibly how it should be
/// drawn.
/// 
/// Clients must send an ack_configure in response to this event. See
/// xdg_surface.configure and xdg_surface.ack_configure for details.
/// 
 void onconfigure(void Function(int width, int height, List<int> states) handler) {
   _configureHandler = handler;
 }

 void Function(int width, int height, List<int> states)? _configureHandler;

 /// surface wants to be closed
/// 
/// The close event is sent by the compositor when the user
/// wants the surface to be closed. This should be equivalent to
/// the user clicking the close button in client-side decorations,
/// if your application has any.
/// 
/// This is only a request that the user intends to close the
/// window. The client may choose to ignore this request, or show
/// a dialog to ask the user to save their data, etc.
/// 
 void onclose(void Function() handler) {
   _closeHandler = handler;
 }

 void Function()? _closeHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_configureHandler != null) {
         _configureHandler!(
           ByteData.view(data.buffer).getInt32(0, Endian.host),
           ByteData.view(data.buffer).getInt32(4, Endian.host),
           getArray(data, 8),
         );
       }
       break;
     case 1:
       if (_closeHandler != null) {
         _closeHandler!(
         );
       }
       break;
   }
 }
}

/// edge values for resizing
/// 
/// These values are used to indicate which edge of a surface
/// is being dragged in a resize operation.
/// 

enum ZxdgToplevelV6resizeEdge {
  /// 
  none,
  /// 
  top,
  /// 
  bottom,
  /// 
  left,
  /// 
  topLeft,
  /// 
  bottomLeft,
  /// 
  right,
  /// 
  topRight,
  /// 
  bottomRight,
}

/// types of state on the surface
/// 
/// The different state values used on the surface. This is designed for
/// state values like maximized, fullscreen. It is paired with the
/// configure event to ensure that both the client and the compositor
/// setting the state can be synchronized.
/// 
/// States set in this way are double-buffered, see wl_surface.commit.
/// 

enum ZxdgToplevelV6state {
  /// the surface is maximized
  maximized,
  /// the surface is fullscreen
  fullscreen,
  /// the surface is being resized
  resizing,
  /// the surface is now activated
  activated,
}

/// short-lived, popup surfaces for menus
/// 
/// A popup surface is a short-lived, temporary surface. It can be used to
/// implement for example menus, popovers, tooltips and other similar user
/// interface concepts.
/// 
/// A popup can be made to take an explicit grab. See xdg_popup.grab for
/// details.
/// 
/// When the popup is dismissed, a popup_done event will be sent out, and at
/// the same time the surface will be unmapped. See the xdg_popup.popup_done
/// event for details.
/// 
/// Explicitly destroying the xdg_popup object will also dismiss the popup and
/// unmap the surface. Clients that want to dismiss the popup when another
/// surface of their own is clicked should dismiss the popup using the destroy
/// request.
/// 
/// The parent surface must have either the xdg_toplevel or xdg_popup surface
/// role.
/// 
/// A newly created xdg_popup will be stacked on top of all previously created
/// xdg_popup surfaces associated with the same xdg_toplevel.
/// 
/// The parent of an xdg_popup must be mapped (see the xdg_surface
/// description) before the xdg_popup itself.
/// 
/// The x and y arguments passed when creating the popup object specify
/// where the top left of the popup should be placed, relative to the
/// local surface coordinates of the parent surface. See
/// xdg_surface.get_popup. An xdg_popup must intersect with or be at least
/// partially adjacent to its parent surface.
/// 
/// The client must call wl_surface.commit on the corresponding wl_surface
/// for the xdg_popup state to take effect.
/// 
class ZxdgPopupV6 extends Proxy implements Dispatcher{
  final Context context;

  ZxdgPopupV6(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> grab(Seat seat, int serial) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        seat,
        serial,
      ],
      [
        WaylandType.object,
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

 /// configure the popup surface
/// 
/// This event asks the popup surface to configure itself given the
/// configuration. The configured state should not be applied immediately.
/// See xdg_surface.configure for details.
/// 
/// The x and y arguments represent the position the popup was placed at
/// given the xdg_positioner rule, relative to the upper left corner of the
/// window geometry of the parent surface.
/// 
 void onconfigure(void Function(int x, int y, int width, int height) handler) {
   _configureHandler = handler;
 }

 void Function(int x, int y, int width, int height)? _configureHandler;

 /// popup interaction is done
/// 
/// The popup_done event is sent out when a popup is dismissed by the
/// compositor. The client should destroy the xdg_popup object at this
/// point.
/// 
 void onpopupDone(void Function() handler) {
   _popupDoneHandler = handler;
 }

 void Function()? _popupDoneHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_configureHandler != null) {
         _configureHandler!(
           ByteData.view(data.buffer).getInt32(0, Endian.host),
           ByteData.view(data.buffer).getInt32(4, Endian.host),
           ByteData.view(data.buffer).getInt32(8, Endian.host),
           ByteData.view(data.buffer).getInt32(12, Endian.host),
         );
       }
       break;
     case 1:
       if (_popupDoneHandler != null) {
         _popupDoneHandler!(
         );
       }
       break;
   }
 }
}

/// 
/// 

enum ZxdgPopupV6error {
  /// tried to grab after being mapped
  invalidGrab,
}

