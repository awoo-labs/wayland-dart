// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/unstable/input-method/input-method-unstable-v1.xml
//
// input_method_unstable_v1 Protocol Copyright: 
/// 
/// Copyright Â© 2012, 2013 Intel Corporation
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:async';
import 'dart:typed_data';

/// surrounding text event
/// 
/// The plain surrounding text around the input position. Cursor is the
/// position in bytes within the surrounding text relative to the beginning
/// of the text. Anchor is the position in bytes of the selection anchor
/// within the surrounding text relative to the beginning of the text. If
/// there is no selected text then anchor is the same as cursor.
/// 
class ZwpInputMethodContextV1SurroundingTextEvent {
/// 
  final String text;

/// 
  final int cursor;

/// 
  final int anchor;

  ZwpInputMethodContextV1SurroundingTextEvent(
this.text,

this.cursor,

this.anchor,

);

@override
String toString(){
  return """ZwpInputMethodContextV1SurroundingTextEvent: {
    text: $text,
    cursor: $cursor,
    anchor: $anchor,
  }""";
}

}

typedef ZwpInputMethodContextV1SurroundingTextEventHandler = void Function(ZwpInputMethodContextV1SurroundingTextEvent);

class ZwpInputMethodContextV1ResetEvent {
  ZwpInputMethodContextV1ResetEvent(
);

@override
String toString(){
  return """ZwpInputMethodContextV1ResetEvent: {
  }""";
}

}

typedef ZwpInputMethodContextV1ResetEventHandler = void Function(ZwpInputMethodContextV1ResetEvent);

class ZwpInputMethodContextV1ContentTypeEvent {
/// 
  final int hint;

/// 
  final int purpose;

  ZwpInputMethodContextV1ContentTypeEvent(
this.hint,

this.purpose,

);

@override
String toString(){
  return """ZwpInputMethodContextV1ContentTypeEvent: {
    hint: $hint,
    purpose: $purpose,
  }""";
}

}

typedef ZwpInputMethodContextV1ContentTypeEventHandler = void Function(ZwpInputMethodContextV1ContentTypeEvent);

class ZwpInputMethodContextV1InvokeActionEvent {
/// 
  final int button;

/// 
  final int index;

  ZwpInputMethodContextV1InvokeActionEvent(
this.button,

this.index,

);

@override
String toString(){
  return """ZwpInputMethodContextV1InvokeActionEvent: {
    button: $button,
    index: $index,
  }""";
}

}

typedef ZwpInputMethodContextV1InvokeActionEventHandler = void Function(ZwpInputMethodContextV1InvokeActionEvent);

class ZwpInputMethodContextV1CommitStateEvent {
/// serial of text input state
  final int serial;

  ZwpInputMethodContextV1CommitStateEvent(
this.serial,

);

@override
String toString(){
  return """ZwpInputMethodContextV1CommitStateEvent: {
    serial: $serial,
  }""";
}

}

typedef ZwpInputMethodContextV1CommitStateEventHandler = void Function(ZwpInputMethodContextV1CommitStateEvent);

class ZwpInputMethodContextV1PreferredLanguageEvent {
/// 
  final String language;

  ZwpInputMethodContextV1PreferredLanguageEvent(
this.language,

);

@override
String toString(){
  return """ZwpInputMethodContextV1PreferredLanguageEvent: {
    language: $language,
  }""";
}

}

typedef ZwpInputMethodContextV1PreferredLanguageEventHandler = void Function(ZwpInputMethodContextV1PreferredLanguageEvent);


/// input method context
/// 
/// Corresponds to a text input on the input method side. An input method context
/// is created on text input activation on the input method side. It allows
/// receiving information about the text input from the application via events.
/// Input method contexts do not keep state after deactivation and should be
/// destroyed after deactivation is handled.
/// 
/// Text is generally UTF-8 encoded, indices and lengths are in bytes.
/// 
/// Serials are used to synchronize the state between the text input and
/// an input method. New serials are sent by the text input in the
/// commit_state request and are used by the input method to indicate
/// the known text input state in events like preedit_string, commit_string,
/// and keysym. The text input can then ignore events from the input method
/// which are based on an outdated state (for example after a reset).
/// 
/// Warning! The protocol described in this file is experimental and
/// backward incompatible changes may be made. Backward compatible changes
/// may be added together with the corresponding interface version bump.
/// Backward incompatible changes are done by bumping the version number in
/// the protocol and interface names and resetting the interface version.
/// Once the protocol is to be declared stable, the 'z' prefix and the
/// version number in the protocol and interface names are removed and the
/// interface version number is reset.
/// 
class ZwpInputMethodContextV1 extends Proxy implements Dispatcher{
  final Context context;

  ZwpInputMethodContextV1(this.context) : super(context.allocateClientId()){
    context.register(this);
  }

/// 
/// 
  Future<void> destroy() async {
    print("ZwpInputMethodContextV1::destroy ");
    final message = WaylandMessage(
      objectId,
      0,
      [
      ],
      [
      ],
    );
    await context.sendMessage(message);
  }

/// commit string
/// 
/// Send the commit string text for insertion to the application.
/// 
/// The text to commit could be either just a single character after a key
/// press or the result of some composing (pre-edit). It could be also an
/// empty text when some text should be removed (see
/// delete_surrounding_text) or when the input cursor should be moved (see
/// cursor_position).
/// 
/// Any previously set composing text will be removed.
/// 
/// [serial]: serial of the latest known text input state
/// [text]:
  Future<void> commitString(int serial, String text) async {
    print("ZwpInputMethodContextV1::commitString  serial: $serial text: $text");
    final message = WaylandMessage(
      objectId,
      1,
      [
        serial,
        text,
      ],
      [
        WaylandType.uint,
        WaylandType.string,
      ],
    );
    await context.sendMessage(message);
  }

/// pre-edit string
/// 
/// Send the pre-edit string text to the application text input.
/// 
/// The commit text can be used to replace the pre-edit text on reset (for
/// example on unfocus).
/// 
/// Previously sent preedit_style and preedit_cursor requests are also
/// processed by the text_input.
/// 
/// [serial]: serial of the latest known text input state
/// [text]:
/// [commit]:
  Future<void> preeditString(int serial, String text, String commit) async {
    print("ZwpInputMethodContextV1::preeditString  serial: $serial text: $text commit: $commit");
    final message = WaylandMessage(
      objectId,
      2,
      [
        serial,
        text,
        commit,
      ],
      [
        WaylandType.uint,
        WaylandType.string,
        WaylandType.string,
      ],
    );
    await context.sendMessage(message);
  }

/// pre-edit styling
/// 
/// Set the styling information on composing text. The style is applied for
/// length in bytes from index relative to the beginning of
/// the composing text (as byte offset). Multiple styles can
/// be applied to a composing text.
/// 
/// This request should be sent before sending a preedit_string request.
/// 
/// [index]:
/// [length]:
/// [style]:
  Future<void> preeditStyling(int index, int length, int style) async {
    print("ZwpInputMethodContextV1::preeditStyling  index: $index length: $length style: $style");
    final message = WaylandMessage(
      objectId,
      3,
      [
        index,
        length,
        style,
      ],
      [
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// pre-edit cursor
/// 
/// Set the cursor position inside the composing text (as byte offset)
/// relative to the start of the composing text.
/// 
/// When index is negative no cursor should be displayed.
/// 
/// This request should be sent before sending a preedit_string request.
/// 
/// [index]:
  Future<void> preeditCursor(int index) async {
    print("ZwpInputMethodContextV1::preeditCursor  index: $index");
    final message = WaylandMessage(
      objectId,
      4,
      [
        index,
      ],
      [
        WaylandType.int,
      ],
    );
    await context.sendMessage(message);
  }

/// delete text
/// 
/// Remove the surrounding text.
/// 
/// This request will be handled on the text_input side directly following
/// a commit_string request.
/// 
/// [index]:
/// [length]:
  Future<void> deleteSurroundingText(int index, int length) async {
    print("ZwpInputMethodContextV1::deleteSurroundingText  index: $index length: $length");
    final message = WaylandMessage(
      objectId,
      5,
      [
        index,
        length,
      ],
      [
        WaylandType.int,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// set cursor to a new position
/// 
/// Set the cursor and anchor to a new position. Index is the new cursor
/// position in bytes (when >= 0 this is relative to the end of the inserted text,
/// otherwise it is relative to the beginning of the inserted text). Anchor is
/// the new anchor position in bytes (when >= 0 this is relative to the end of the
/// inserted text, otherwise it is relative to the beginning of the inserted
/// text). When there should be no selected text, anchor should be the same
/// as index.
/// 
/// This request will be handled on the text_input side directly following
/// a commit_string request.
/// 
/// [index]:
/// [anchor]:
  Future<void> cursorPosition(int index, int anchor) async {
    print("ZwpInputMethodContextV1::cursorPosition  index: $index anchor: $anchor");
    final message = WaylandMessage(
      objectId,
      6,
      [
        index,
        anchor,
      ],
      [
        WaylandType.int,
        WaylandType.int,
      ],
    );
    await context.sendMessage(message);
  }

/// 
/// 
/// [map]:
  Future<void> modifiersMap(List<int> map) async {
    print("ZwpInputMethodContextV1::modifiersMap  map: $map");
    final message = WaylandMessage(
      objectId,
      7,
      [
        map,
      ],
      [
        WaylandType.array,
      ],
    );
    await context.sendMessage(message);
  }

/// keysym
/// 
/// Notify when a key event was sent. Key events should not be used for
/// normal text input operations, which should be done with commit_string,
/// delete_surrounding_text, etc. The key event follows the wl_keyboard key
/// event convention. Sym is an XKB keysym, state is a wl_keyboard key_state.
/// 
/// [serial]: serial of the latest known text input state
/// [time]:
/// [sym]:
/// [state]:
/// [modifiers]:
  Future<void> keysym(int serial, int time, int sym, int state, int modifiers) async {
    print("ZwpInputMethodContextV1::keysym  serial: $serial time: $time sym: $sym state: $state modifiers: $modifiers");
    final message = WaylandMessage(
      objectId,
      8,
      [
        serial,
        time,
        sym,
        state,
        modifiers,
      ],
      [
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// grab hardware keyboard
/// 
/// Allow an input method to receive hardware keyboard input and process
/// key events to generate text events (with pre-edit) over the wire. This
/// allows input methods which compose multiple key events for inputting
/// text like it is done for CJK languages.
/// 
/// [keyboard]:
  Future<Keyboard> grabKeyboard() async {
  var keyboard =  Keyboard(context);
    print("ZwpInputMethodContextV1::grabKeyboard  keyboard: $keyboard");
    final message = WaylandMessage(
      objectId,
      9,
      [
        keyboard,
      ],
      [
        WaylandType.newId,
      ],
    );
    await context.sendMessage(message);
    return keyboard;
  }

/// forward key event
/// 
/// Forward a wl_keyboard::key event to the client that was not processed
/// by the input method itself. Should be used when filtering key events
/// with grab_keyboard.  The arguments should be the ones from the
/// wl_keyboard::key event.
/// 
/// For generating custom key events use the keysym request instead.
/// 
/// [serial]: serial from wl_keyboard::key
/// [time]: time from wl_keyboard::key
/// [key]: key from wl_keyboard::key
/// [state]: state from wl_keyboard::key
  Future<void> key(int serial, int time, int key, int state) async {
    print("ZwpInputMethodContextV1::key  serial: $serial time: $time key: $key state: $state");
    final message = WaylandMessage(
      objectId,
      10,
      [
        serial,
        time,
        key,
        state,
      ],
      [
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// forward modifiers event
/// 
/// Forward a wl_keyboard::modifiers event to the client that was not
/// processed by the input method itself.  Should be used when filtering
/// key events with grab_keyboard. The arguments should be the ones
/// from the wl_keyboard::modifiers event.
/// 
/// [serial]: serial from wl_keyboard::modifiers
/// [mods_depressed]: mods_depressed from wl_keyboard::modifiers
/// [mods_latched]: mods_latched from wl_keyboard::modifiers
/// [mods_locked]: mods_locked from wl_keyboard::modifiers
/// [group]: group from wl_keyboard::modifiers
  Future<void> modifiers(int serial, int modsDepressed, int modsLatched, int modsLocked, int group) async {
    print("ZwpInputMethodContextV1::modifiers  serial: $serial modsDepressed: $modsDepressed modsLatched: $modsLatched modsLocked: $modsLocked group: $group");
    final message = WaylandMessage(
      objectId,
      11,
      [
        serial,
        modsDepressed,
        modsLatched,
        modsLocked,
        group,
      ],
      [
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// 
/// 
/// [serial]: serial of the latest known text input state
/// [language]:
  Future<void> language(int serial, String language) async {
    print("ZwpInputMethodContextV1::language  serial: $serial language: $language");
    final message = WaylandMessage(
      objectId,
      12,
      [
        serial,
        language,
      ],
      [
        WaylandType.uint,
        WaylandType.string,
      ],
    );
    await context.sendMessage(message);
  }

/// 
/// 
/// [serial]: serial of the latest known text input state
/// [direction]:
  Future<void> textDirection(int serial, int direction) async {
    print("ZwpInputMethodContextV1::textDirection  serial: $serial direction: $direction");
    final message = WaylandMessage(
      objectId,
      13,
      [
        serial,
        direction,
      ],
      [
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// surrounding text event
/// 
/// The plain surrounding text around the input position. Cursor is the
/// position in bytes within the surrounding text relative to the beginning
/// of the text. Anchor is the position in bytes of the selection anchor
/// within the surrounding text relative to the beginning of the text. If
/// there is no selected text then anchor is the same as cursor.
/// 
/// Event handler for SurroundingText
/// - [text]:
/// - [cursor]:
/// - [anchor]:
 void onSurroundingText(ZwpInputMethodContextV1SurroundingTextEventHandler handler) {
   _surroundingTextHandler = handler;
 }

 ZwpInputMethodContextV1SurroundingTextEventHandler? _surroundingTextHandler;

/// 
/// 
/// Event handler for Reset
 void onReset(ZwpInputMethodContextV1ResetEventHandler handler) {
   _resetHandler = handler;
 }

 ZwpInputMethodContextV1ResetEventHandler? _resetHandler;

/// 
/// 
/// Event handler for ContentType
/// - [hint]:
/// - [purpose]:
 void onContentType(ZwpInputMethodContextV1ContentTypeEventHandler handler) {
   _contentTypeHandler = handler;
 }

 ZwpInputMethodContextV1ContentTypeEventHandler? _contentTypeHandler;

/// 
/// 
/// Event handler for InvokeAction
/// - [button]:
/// - [index]:
 void onInvokeAction(ZwpInputMethodContextV1InvokeActionEventHandler handler) {
   _invokeActionHandler = handler;
 }

 ZwpInputMethodContextV1InvokeActionEventHandler? _invokeActionHandler;

/// 
/// 
/// Event handler for CommitState
/// - [serial]: serial of text input state
 void onCommitState(ZwpInputMethodContextV1CommitStateEventHandler handler) {
   _commitStateHandler = handler;
 }

 ZwpInputMethodContextV1CommitStateEventHandler? _commitStateHandler;

/// 
/// 
/// Event handler for PreferredLanguage
/// - [language]:
 void onPreferredLanguage(ZwpInputMethodContextV1PreferredLanguageEventHandler handler) {
   _preferredLanguageHandler = handler;
 }

 ZwpInputMethodContextV1PreferredLanguageEventHandler? _preferredLanguageHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_surroundingTextHandler != null) {
var event = ZwpInputMethodContextV1SurroundingTextEvent(
           getString(data, 0),
           ByteData.view(data.buffer).getUint32(4, Endian.little),
           ByteData.view(data.buffer).getUint32(8, Endian.little),
        );
         _surroundingTextHandler!(event);
       }
       break;
     case 1:
       if (_resetHandler != null) {
var event = ZwpInputMethodContextV1ResetEvent(
        );
         _resetHandler!(event);
       }
       break;
     case 2:
       if (_contentTypeHandler != null) {
var event = ZwpInputMethodContextV1ContentTypeEvent(
           ByteData.view(data.buffer).getUint32(0, Endian.little),
           ByteData.view(data.buffer).getUint32(4, Endian.little),
        );
         _contentTypeHandler!(event);
       }
       break;
     case 3:
       if (_invokeActionHandler != null) {
var event = ZwpInputMethodContextV1InvokeActionEvent(
           ByteData.view(data.buffer).getUint32(0, Endian.little),
           ByteData.view(data.buffer).getUint32(4, Endian.little),
        );
         _invokeActionHandler!(event);
       }
       break;
     case 4:
       if (_commitStateHandler != null) {
var event = ZwpInputMethodContextV1CommitStateEvent(
           ByteData.view(data.buffer).getUint32(0, Endian.little),
        );
         _commitStateHandler!(event);
       }
       break;
     case 5:
       if (_preferredLanguageHandler != null) {
var event = ZwpInputMethodContextV1PreferredLanguageEvent(
           getString(data, 0),
        );
         _preferredLanguageHandler!(event);
       }
       break;
   }
 }
}


/// activate event
/// 
/// A text input was activated. Creates an input method context object
/// which allows communication with the text input.
/// 
class ZwpInputMethodV1ActivateEvent {
/// 
  final int id;

  ZwpInputMethodV1ActivateEvent(
this.id,

);

@override
String toString(){
  return """ZwpInputMethodV1ActivateEvent: {
    id: $id,
  }""";
}

}

typedef ZwpInputMethodV1ActivateEventHandler = void Function(ZwpInputMethodV1ActivateEvent);

/// deactivate event
/// 
/// The text input corresponding to the context argument was deactivated.
/// The input method context should be destroyed after deactivation is
/// handled.
/// 
class ZwpInputMethodV1DeactivateEvent {
/// 
  final int context;

  ZwpInputMethodV1DeactivateEvent(
this.context,

);

@override
String toString(){
  return """ZwpInputMethodV1DeactivateEvent: {
    context: $context,
  }""";
}

}

typedef ZwpInputMethodV1DeactivateEventHandler = void Function(ZwpInputMethodV1DeactivateEvent);


/// input method
/// 
/// An input method object is responsible for composing text in response to
/// input from hardware or virtual keyboards. There is one input method
/// object per seat. On activate there is a new input method context object
/// created which allows the input method to communicate with the text input.
/// 
class ZwpInputMethodV1 extends Proxy implements Dispatcher{
  final Context context;

  ZwpInputMethodV1(this.context) : super(context.allocateClientId()){
    context.register(this);
  }

/// activate event
/// 
/// A text input was activated. Creates an input method context object
/// which allows communication with the text input.
/// 
/// Event handler for Activate
/// - [id]:
 void onActivate(ZwpInputMethodV1ActivateEventHandler handler) {
   _activateHandler = handler;
 }

 ZwpInputMethodV1ActivateEventHandler? _activateHandler;

/// deactivate event
/// 
/// The text input corresponding to the context argument was deactivated.
/// The input method context should be destroyed after deactivation is
/// handled.
/// 
/// Event handler for Deactivate
/// - [context]:
 void onDeactivate(ZwpInputMethodV1DeactivateEventHandler handler) {
   _deactivateHandler = handler;
 }

 ZwpInputMethodV1DeactivateEventHandler? _deactivateHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_activateHandler != null) {
var event = ZwpInputMethodV1ActivateEvent(
           context.getProxy(ByteData.view(data.buffer).getUint32(0, Endian.little)).objectId,
        );
         _activateHandler!(event);
       }
       break;
     case 1:
       if (_deactivateHandler != null) {
var event = ZwpInputMethodV1DeactivateEvent(
           context.getProxy(ByteData.view(data.buffer).getUint32(0, Endian.little)).objectId,
        );
         _deactivateHandler!(event);
       }
       break;
   }
 }
}



/// interface for implementing keyboards
/// 
/// Only one client can bind this interface at a time.
/// 
class ZwpInputPanelV1 extends Proxy{
  final Context context;

  ZwpInputPanelV1(this.context) : super(context.allocateClientId()){
    context.register(this);
  }

/// 
/// 
/// [id]:
/// [surface]:
  Future<ZwpInputPanelSurfaceV1> getInputPanelSurface(Surface surface) async {
  var id =  ZwpInputPanelSurfaceV1(context);
    print("ZwpInputPanelV1::getInputPanelSurface  id: $id surface: $surface");
    final message = WaylandMessage(
      objectId,
      0,
      [
        id,
        surface,
      ],
      [
        WaylandType.newId,
        WaylandType.object,
      ],
    );
    await context.sendMessage(message);
    return id;
  }

}



/// 
/// 
class ZwpInputPanelSurfaceV1 extends Proxy{
  final Context context;

  ZwpInputPanelSurfaceV1(this.context) : super(context.allocateClientId()){
    context.register(this);
  }

/// set the surface type as a keyboard
/// 
/// Set the input_panel_surface type to keyboard.
/// 
/// A keyboard surface is only shown when a text input is active.
/// 
/// [output]:
/// [position]:
  Future<void> setToplevel(Output output, int position) async {
    print("ZwpInputPanelSurfaceV1::setToplevel  output: $output position: $position");
    final message = WaylandMessage(
      objectId,
      0,
      [
        output,
        position,
      ],
      [
        WaylandType.object,
        WaylandType.uint,
      ],
    );
    await context.sendMessage(message);
  }

/// set the surface type as an overlay panel
/// 
/// Set the input_panel_surface to be an overlay panel.
/// 
/// This is shown near the input cursor above the application window when
/// a text input is active.
/// 
  Future<void> setOverlayPanel() async {
    print("ZwpInputPanelSurfaceV1::setOverlayPanel ");
    final message = WaylandMessage(
      objectId,
      1,
      [
      ],
      [
      ],
    );
    await context.sendMessage(message);
  }

}

/// 
/// 

enum ZwpInputPanelSurfaceV1position {
/// 
  centerBottom,
}

