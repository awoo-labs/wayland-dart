// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/unstable/xdg-foreign/xdg-foreign-unstable-v1.xml
//
// xdg_foreign_unstable_v1 Protocol Copyright: 
/// 
/// Copyright Â© 2015-2016 Red Hat Inc.
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// interface for exporting surfaces
/// 
/// A global interface used for exporting surfaces that can later be imported
/// using xdg_importer.
/// 
class ZxdgExporterV1 extends Proxy{
  final Context context;

  ZxdgExporterV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> export(Surface surface) async {
  var id =  ZxdgExporterV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
        surface,
      ],
      [
        WaylandType.newId,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

}

/// interface for importing surfaces
/// 
/// A global interface used for importing surfaces exported by xdg_exporter.
/// With this interface, a client can create a reference to a surface of
/// another client.
/// 
class ZxdgImporterV1 extends Proxy{
  final Context context;

  ZxdgImporterV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> import(String handle) async {
  var id =  ZxdgImporterV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
        handle,
      ],
      [
        WaylandType.newId,
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

}

/// an exported surface handle
/// 
/// An xdg_exported object represents an exported reference to a surface. The
/// exported surface may be referenced as long as the xdg_exported object not
/// destroyed. Destroying the xdg_exported invalidates any relationship the
/// importer may have established using xdg_imported.
/// 
class ZxdgExportedV1 extends Proxy implements Dispatcher{
  final Context context;

  ZxdgExportedV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

 /// the exported surface handle
/// 
/// The handle event contains the unique handle of this exported surface
/// reference. It may be shared with any client, which then can use it to
/// import the surface by calling xdg_importer.import. A handle may be
/// used to import the surface multiple times.
/// 
 void onhandle(void Function(String handle) handler) {
   _handleHandler = handler;
 }

 void Function(String handle)? _handleHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_handleHandler != null) {
         _handleHandler!(
           getString(data, 0),
         );
       }
       break;
   }
 }
}

/// an imported surface handle
/// 
/// An xdg_imported object represents an imported reference to surface exported
/// by some client. A client can use this interface to manipulate
/// relationships between its own surfaces and the imported surface.
/// 
class ZxdgImportedV1 extends Proxy implements Dispatcher{
  final Context context;

  ZxdgImportedV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setParentOf(Surface surface) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        surface,
      ],
      [
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

 /// the imported surface handle has been destroyed
/// 
/// The imported surface handle has been destroyed and any relationship set
/// up has been invalidated. This may happen for various reasons, for
/// example if the exported surface or the exported surface handle has been
/// destroyed, if the handle used for importing was invalid.
/// 
 void ondestroyed(void Function() handler) {
   _destroyedHandler = handler;
 }

 void Function()? _destroyedHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_destroyedHandler != null) {
         _destroyedHandler!(
         );
       }
       break;
   }
 }
}

