// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/xwayland-shell/xwayland-shell-v1.xml
//
// xwayland_shell_v1 Protocol Copyright: 
/// 
/// Copyright Â© 2022 Joshua Ashton
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// context object for Xwayland shell
/// 
/// xwayland_shell_v1 is a singleton global object that
/// provides the ability to create a xwayland_surface_v1 object
/// for a given wl_surface.
/// 
/// This interface is intended to be bound by the Xwayland server.
/// 
/// A compositor must not allow clients other than Xwayland to
/// bind to this interface. A compositor should hide this global
/// from other clients' wl_registry.
/// A client the compositor does not consider to be an Xwayland
/// server attempting to bind this interface will result in
/// an implementation-defined error.
/// 
/// An Xwayland server that has bound this interface must not
/// set the `WL_SURFACE_ID` atom on a window.
/// 
class XwaylandShellV1 extends Proxy{
  final Context context;

  XwaylandShellV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> getXwaylandSurface(Surface surface) async {
  var id =  XwaylandShellV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
        surface,
      ],
      [
        WaylandType.newId,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum XwaylandShellV1error {
  /// given wl_surface has another role
  role,
}

/// interface for associating Xwayland windows to wl_surfaces
/// 
/// An Xwayland surface is a surface managed by an Xwayland server.
/// It is used for associating surfaces to Xwayland windows.
/// 
/// The Xwayland server associated with actions in this interface is
/// determined by the Wayland client making the request.
/// 
/// The client must call wl_surface.commit on the corresponding wl_surface
/// for the xwayland_surface_v1 state to take effect.
/// 
class XwaylandSurfaceV1 extends Proxy{
  final Context context;

  XwaylandSurfaceV1(this.context) : super(context.allocateClientId());

  Future<void> setSerial(int serialLo, int serialHi) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
        serialLo,
        serialHi,
      ],
      [
        WaylandType.uint,
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum XwaylandSurfaceV1error {
  /// given wl_surface is already associated with an X11 window
  alreadyAssociated,
  /// serial was not valid
  invalidSerial,
}

