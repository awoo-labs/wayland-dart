// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/ext-transient-seat/ext-transient-seat-v1.xml
//
// ext_transient_seat_v1 Protocol Copyright: 
/// 
/// Copyright Â© 2020 - 2023 Andri Yngvason
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// transient seat manager
/// 
/// The transient seat manager creates short-lived seats.
/// 
class ExtTransientSeatManagerV1 extends Proxy{
  final Context context;

  ExtTransientSeatManagerV1(this.context) : super(context.allocateClientId());

  Future<void> create() async {
  var seat =  ExtTransientSeatManagerV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
        seat,
      ],
      [
        WaylandType.newId,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

}

/// transient seat handle
/// 
/// When the transient seat handle is destroyed, the seat itself will also be
/// destroyed.
/// 
class ExtTransientSeatV1 extends Proxy implements Dispatcher{
  final Context context;

  ExtTransientSeatV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

 /// transient seat is ready
/// 
/// This event advertises the global name for the wl_seat to be used with
/// wl_registry_bind.
/// 
/// It is sent exactly once, immediately after the transient seat is created
/// and the new "wl_seat" global is advertised, if and only if the creation
/// of the transient seat was allowed.
/// 
 void onready(void Function(int globalName) handler) {
   _readyHandler = handler;
 }

 void Function(int globalName)? _readyHandler;

 /// transient seat creation denied
/// 
/// The event informs the client that the compositor denied its request to
/// create a transient seat.
/// 
/// It is sent exactly once, immediately after the transient seat object is
/// created, if and only if the creation of the transient seat was denied.
/// 
/// After receiving this event, the client should destroy the object.
/// 
 void ondenied(void Function() handler) {
   _deniedHandler = handler;
 }

 void Function()? _deniedHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_readyHandler != null) {
         _readyHandler!(
           ByteData.view(data.buffer).getInt32(0, Endian.host),
         );
       }
       break;
     case 1:
       if (_deniedHandler != null) {
         _deniedHandler!(
         );
       }
       break;
   }
 }
}

