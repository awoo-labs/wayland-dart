// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/alpha-modifier/alpha-modifier-v1.xml
//
// alpha_modifier_v1 Protocol Copyright: 
/// 
/// Copyright Â© 2024 Xaver Hugl
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// surface alpha modifier manager
/// 
/// This interface allows a client to set a factor for the alpha values on a
/// surface, which can be used to offload such operations to the compositor,
/// which can in turn for example offload them to KMS.
/// 
/// Warning! The protocol described in this file is currently in the testing
/// phase. Backward compatible changes may be added together with the
/// corresponding interface version bump. Backward incompatible changes can
/// only be done by creating a new major version of the extension.
/// 
class WpAlphaModifierV1 extends Proxy{
  final Context context;

  WpAlphaModifierV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> getSurface(Surface surface) async {
  var id =  WpAlphaModifierV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
        surface,
      ],
      [
        WaylandType.newId,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum WpAlphaModifierV1error {
  /// wl_surface already has a alpha modifier object
  alreadyConstructed,
}

/// alpha modifier object for a surface
/// 
/// This interface allows the client to set a factor for the alpha values on
/// a surface, which can be used to offload such operations to the compositor.
/// The default factor is UINT32_MAX.
/// 
/// This object has to be destroyed before the associated wl_surface. Once the
/// wl_surface is destroyed, all request on this object will raise the
/// no_surface error.
/// 
class WpAlphaModifierSurfaceV1 extends Proxy{
  final Context context;

  WpAlphaModifierSurfaceV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setMultiplier(int factor) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        factor,
      ],
      [
        WaylandType.uint,
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum WpAlphaModifierSurfaceV1error {
  /// wl_surface was destroyed
  noSurface,
}

