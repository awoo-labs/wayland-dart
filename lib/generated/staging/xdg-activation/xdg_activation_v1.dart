// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/xdg-activation/xdg-activation-v1.xml
//
// xdg_activation_v1 Protocol Copyright: 
/// 
/// Copyright © 2020 Aleix Pol Gonzalez <aleixpol@kde.org>
/// Copyright © 2020 Carlos Garnacho <carlosg@gnome.org>
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// interface for activating surfaces
/// 
/// A global interface used for informing the compositor about applications
/// being activated or started, or for applications to request to be
/// activated.
/// 
class XdgActivationV1 extends Proxy{
  final Context context;

  XdgActivationV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> getActivationToken() async {
  var id =  XdgActivationV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
      ],
      [
        WaylandType.newId,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> activate(String token, Surface surface) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        token,
        surface,
      ],
      [
        WaylandType.string,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

}

/// an exported activation handle
/// 
/// An object for setting up a token and receiving a token handle that can
/// be passed as an activation token to another client.
/// 
/// The object is created using the xdg_activation_v1.get_activation_token
/// request. This object should then be populated with the app_id, surface
/// and serial information and committed. The compositor shall then issue a
/// done event with the token. In case the request's parameters are invalid,
/// the compositor will provide an invalid token.
/// 
class XdgActivationTokenV1 extends Proxy implements Dispatcher{
  final Context context;

  XdgActivationTokenV1(this.context) : super(context.allocateClientId());

  Future<void> setSerial(int serial, Seat seat) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
        serial,
        seat,
      ],
      [
        WaylandType.uint,
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setAppId(String appId) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        appId,
      ],
      [
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setSurface(Surface surface) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        surface,
      ],
      [
        WaylandType.object,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> commit() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      3,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      4,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

 /// the exported activation token
/// 
/// The 'done' event contains the unique token of this activation request
/// and notifies that the provider is done.
/// 
 void ondone(void Function(String token) handler) {
   _doneHandler = handler;
 }

 void Function(String token)? _doneHandler;

 @override
 void dispatch(int opcode, int fd, Uint8List data) {
   switch (opcode) {
     case 0:
       if (_doneHandler != null) {
         _doneHandler!(
           getString(data, 0),
         );
       }
       break;
   }
 }
}

/// 
/// 

enum XdgActivationTokenV1error {
  /// The token has already been used previously
  alreadyUsed,
}

