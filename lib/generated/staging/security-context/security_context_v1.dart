// Generated by dart-wayland-scanner
// https://github.com/your-repo/dart-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/main/staging/security-context/security-context-v1.xml
//
// security_context_v1 Protocol Copyright: 
/// 
/// Copyright Â© 2021 Simon Ser
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice (including the next
/// paragraph) shall be included in all copies or substantial portions of the
/// Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
/// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// 

library client;

import 'package:wayland/wayland.dart';
import 'package:wayland/generated/wayland.dart';
import 'dart:typed_data';
/// client security context manager
/// 
/// This interface allows a client to register a new Wayland connection to
/// the compositor and attach a security context to it.
/// 
/// This is intended to be used by sandboxes. Sandbox engines attach a
/// security context to all connections coming from inside the sandbox. The
/// compositor can then restrict the features that the sandboxed connections
/// can use.
/// 
/// Compositors should forbid nesting multiple security contexts by not
/// exposing wp_security_context_manager_v1 global to clients with a security
/// context attached, or by sending the nested protocol error. Nested
/// security contexts are dangerous because they can potentially allow
/// privilege escalation of a sandboxed client.
/// 
/// Warning! The protocol described in this file is currently in the testing
/// phase. Backward compatible changes may be added together with the
/// corresponding interface version bump. Backward incompatible changes can
/// only be done by creating a new major version of the extension.
/// 
class WpSecurityContextManagerV1 extends Proxy{
  final Context context;

  WpSecurityContextManagerV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> createListener(int listenFd, int closeFd) async {
  var id =  WpSecurityContextManagerV1(context);
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        id,
        listenFd,
        closeFd,
      ],
      [
        WaylandType.newId,
        WaylandType.fd,
        WaylandType.fd,
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum WpSecurityContextManagerV1error {
  /// listening socket FD is invalid
  invalidListenFd,
  /// nested security contexts are forbidden
  nested,
}

/// client security context
/// 
/// The security context allows a client to register a new client and attach
/// security context metadata to the connections.
/// 
/// When both are set, the combination of the application ID and the sandbox
/// engine must uniquely identify an application. The same application ID
/// will be used across instances (e.g. if the application is restarted, or
/// if the application is started multiple times).
/// 
/// When both are set, the combination of the instance ID and the sandbox
/// engine must uniquely identify a running instance of an application.
/// 
class WpSecurityContextV1 extends Proxy{
  final Context context;

  WpSecurityContextV1(this.context) : super(context.allocateClientId());

  Future<void> destroy() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      0,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setSandboxEngine(String name) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      1,
      [
        name,
      ],
      [
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setAppId(String appId) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      2,
      [
        appId,
      ],
      [
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> setInstanceId(String instanceId) async {
    final message = WaylandMessage(
      context.allocateClientId(),
      3,
      [
        instanceId,
      ],
      [
        WaylandType.string,
      ],
    );
    context.sendMessage(message);
  }

  Future<void> commit() async {
    final message = WaylandMessage(
      context.allocateClientId(),
      4,
      [
      ],
      [
      ],
    );
    context.sendMessage(message);
  }

}

/// 
/// 

enum WpSecurityContextV1error {
  /// security context has already been committed
  alreadyUsed,
  /// metadata has already been set
  alreadySet,
  /// metadata is invalid
  invalidMetadata,
}

